//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XenAPI {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class FriendlyErrorNames {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal FriendlyErrorNames() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("XenAdmin.XenAPI.FriendlyErrorNames", typeof(FriendlyErrorNames).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An activation key can only be applied when the edition is set to &apos;free&apos;..
        /// </summary>
        public static string ACTIVATION_WHILE_NOT_FREE {
            get {
                return ResourceManager.GetString("ACTIVATION_WHILE_NOT_FREE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified IP address violates the VIF locking configuration..
        /// </summary>
        public static string ADDRESS_VIOLATES_LOCKING_CONSTRAINT {
            get {
                return ResourceManager.GetString("ADDRESS_VIOLATES_LOCKING_CONSTRAINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External authentication for this server is already enabled..
        /// </summary>
        public static string AUTH_ALREADY_ENABLED {
            get {
                return ResourceManager.GetString("AUTH_ALREADY_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External authentication has been disabled with errors: Your AD machine account was not disabled successfully on the AD server..
        /// </summary>
        public static string AUTH_DISABLE_FAILED {
            get {
                return ResourceManager.GetString("AUTH_DISABLE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External authentication has been disabled with errors: Some AD machine accounts were not disabled on the AD server due to invalid account.
        /// </summary>
        public static string AUTH_DISABLE_FAILED_INVALID_ACCOUNT {
            get {
                return ResourceManager.GetString("AUTH_DISABLE_FAILED_INVALID_ACCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External authentication has been disabled with errors: Your AD machine account was not disabled on the AD server as permission was denied..
        /// </summary>
        public static string AUTH_DISABLE_FAILED_PERMISSION_DENIED {
            get {
                return ResourceManager.GetString("AUTH_DISABLE_FAILED_PERMISSION_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External authentication has been disabled with errors: Some AD machine accounts were not disabled on the AD server due to invalid credentials..
        /// </summary>
        public static string AUTH_DISABLE_FAILED_WRONG_CREDENTIALS {
            get {
                return ResourceManager.GetString("AUTH_DISABLE_FAILED_WRONG_CREDENTIALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not enable external authentication..
        /// </summary>
        public static string AUTH_ENABLE_FAILED {
            get {
                return ResourceManager.GetString("AUTH_ENABLE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server was unable to contact your domain server to enable external authentication. Check that your settings are correct and a route to the server exists..
        /// </summary>
        public static string AUTH_ENABLE_FAILED_DOMAIN_LOOKUP_FAILED {
            get {
                return ResourceManager.GetString("AUTH_ENABLE_FAILED_DOMAIN_LOOKUP_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host failed to enable external authentication..
        /// </summary>
        public static string AUTH_ENABLE_FAILED_INVALID_ACCOUNT {
            get {
                return ResourceManager.GetString("AUTH_ENABLE_FAILED_INVALID_ACCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host failed to enable external authentication..
        /// </summary>
        public static string AUTH_ENABLE_FAILED_INVALID_OU {
            get {
                return ResourceManager.GetString("AUTH_ENABLE_FAILED_INVALID_OU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to enable external authentication, permission on the AD server was denied..
        /// </summary>
        public static string AUTH_ENABLE_FAILED_PERMISSION_DENIED {
            get {
                return ResourceManager.GetString("AUTH_ENABLE_FAILED_PERMISSION_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to enable external authentication, the AD server was unavailable..
        /// </summary>
        public static string AUTH_ENABLE_FAILED_UNAVAILABLE {
            get {
                return ResourceManager.GetString("AUTH_ENABLE_FAILED_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to enable external authentication, the supplied credentials were invalid..
        /// </summary>
        public static string AUTH_ENABLE_FAILED_WRONG_CREDENTIALS {
            get {
                return ResourceManager.GetString("AUTH_ENABLE_FAILED_WRONG_CREDENTIALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External authentication is disabled, unable to resolve subject name..
        /// </summary>
        public static string AUTH_IS_DISABLED {
            get {
                return ResourceManager.GetString("AUTH_IS_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error querying the external directory service..
        /// </summary>
        public static string AUTH_SERVICE_ERROR {
            get {
                return ResourceManager.GetString("AUTH_SERVICE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown type of external authentication..
        /// </summary>
        public static string AUTH_UNKNOWN_TYPE {
            get {
                return ResourceManager.GetString("AUTH_UNKNOWN_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The backup could not be performed because the backup script failed..
        /// </summary>
        public static string BACKUP_SCRIPT_FAILED {
            get {
                return ResourceManager.GetString("BACKUP_SCRIPT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout trying to balloon down memory before VM migration. If the error occurs repeatedly, consider increasing the memory-dynamic-min value..
        /// </summary>
        public static string BALLOONING_TIMEOUT_BEFORE_MIGRATION {
            get {
                return ResourceManager.GetString("BALLOONING_TIMEOUT_BEFORE_MIGRATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The bootloader for this VM returned an error -- did the VM installation succeed?  {1}.
        /// </summary>
        public static string BOOTLOADER_FAILED {
            get {
                return ResourceManager.GetString("BOOTLOADER_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified bridge already exists..
        /// </summary>
        public static string BRIDGE_NAME_EXISTS {
            get {
                return ResourceManager.GetString("BRIDGE_NAME_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find bridge required by VM..
        /// </summary>
        public static string BRIDGE_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("BRIDGE_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This PIF is a bond slave and cannot have a tunnel on it..
        /// </summary>
        public static string CANNOT_ADD_TUNNEL_TO_BOND_SLAVE {
            get {
                return ResourceManager.GetString("CANNOT_ADD_TUNNEL_TO_BOND_SLAVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This PIF is a bond slave and cannot have a VLAN on it..
        /// </summary>
        public static string CANNOT_ADD_VLAN_TO_BOND_SLAVE {
            get {
                return ResourceManager.GetString("CANNOT_ADD_VLAN_TO_BOND_SLAVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This properties of this PIF cannot be changed. Only the properties of non-bonded physical PIFs, or bond masters can be changed..
        /// </summary>
        public static string CANNOT_CHANGE_PIF_PROPERTIES {
            get {
                return ResourceManager.GetString("CANNOT_CHANGE_PIF_PROPERTIES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot forward messages because the server cannot be contacted.  The server may be switched off or there may be network connectivity problems..
        /// </summary>
        public static string CANNOT_CONTACT_HOST {
            get {
                return ResourceManager.GetString("CANNOT_CONTACT_HOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An HA statefile could not be created, perhaps because no SR with the appropriate capability was found..
        /// </summary>
        public static string CANNOT_CREATE_STATE_FILE {
            get {
                return ResourceManager.GetString("CANNOT_CREATE_STATE_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The disaster recovery task could not be cleanly destroyed..
        /// </summary>
        public static string CANNOT_DESTROY_DISASTER_RECOVERY_TASK {
            get {
                return ResourceManager.GetString("CANNOT_DESTROY_DISASTER_RECOVERY_TASK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You tried to destroy a system network: these cannot be destroyed..
        /// </summary>
        public static string CANNOT_DESTROY_SYSTEM_NETWORK {
            get {
                return ResourceManager.GetString("CANNOT_DESTROY_SYSTEM_NETWORK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not enable redo log..
        /// </summary>
        public static string CANNOT_ENABLE_REDO_LOG {
            get {
                return ResourceManager.GetString("CANNOT_ENABLE_REDO_LOG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This server cannot be evacuated..
        /// </summary>
        public static string CANNOT_EVACUATE_HOST {
            get {
                return ResourceManager.GetString("CANNOT_EVACUATE_HOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested update could not be obtained from the master..
        /// </summary>
        public static string CANNOT_FETCH_PATCH {
            get {
                return ResourceManager.GetString("CANNOT_FETCH_PATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The backup partition to stream the update to cannot be found.
        /// </summary>
        public static string CANNOT_FIND_OEM_BACKUP_PARTITION {
            get {
                return ResourceManager.GetString("CANNOT_FIND_OEM_BACKUP_PARTITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested update could not be found.  This can occur when you designate a new master.  Please upload it again.
        /// </summary>
        public static string CANNOT_FIND_PATCH {
            get {
                return ResourceManager.GetString("CANNOT_FIND_PATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The restore could not be performed because the state partition could not be found.
        /// </summary>
        public static string CANNOT_FIND_STATE_PARTITION {
            get {
                return ResourceManager.GetString("CANNOT_FIND_STATE_PARTITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested update could not be found. Please upload the update again. This can occur when you run xe update-pool-clean before xe update-apply. .
        /// </summary>
        public static string CANNOT_FIND_UPDATE {
            get {
                return ResourceManager.GetString("CANNOT_FIND_UPDATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This PIF is a bond slave and cannot be plugged..
        /// </summary>
        public static string CANNOT_PLUG_BOND_SLAVE {
            get {
                return ResourceManager.GetString("CANNOT_PLUG_BOND_SLAVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This VM cannot be started because its network interfaces could not be connected.  One of the NICs is in use elsewhere..
        /// </summary>
        public static string CANNOT_PLUG_VIF {
            get {
                return ResourceManager.GetString("CANNOT_PLUG_VIF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The power-state of a control domain cannot be reset..
        /// </summary>
        public static string CANNOT_RESET_CONTROL_DOMAIN {
            get {
                return ResourceManager.GetString("CANNOT_RESET_CONTROL_DOMAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A certificate already exists with the specified name..
        /// </summary>
        public static string CERTIFICATE_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("CERTIFICATE_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified certificate is corrupt or unreadable..
        /// </summary>
        public static string CERTIFICATE_CORRUPT {
            get {
                return ResourceManager.GetString("CERTIFICATE_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified certificate does not exist..
        /// </summary>
        public static string CERTIFICATE_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("CERTIFICATE_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The certificate library is corrupt or unreadable..
        /// </summary>
        public static string CERTIFICATE_LIBRARY_CORRUPT {
            get {
                return ResourceManager.GetString("CERTIFICATE_LIBRARY_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified certificate name is invalid..
        /// </summary>
        public static string CERTIFICATE_NAME_INVALID {
            get {
                return ResourceManager.GetString("CERTIFICATE_NAME_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Change password rejected.
        /// </summary>
        public static string CHANGE_PASSWORD_REJECTED {
            get {
                return ResourceManager.GetString("CHANGE_PASSWORD_REJECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An SR is using clustered local storage. It is not safe to reboot a host at the moment..
        /// </summary>
        public static string CLUSTERED_SR_DEGRADED {
            get {
                return ResourceManager.GetString("CLUSTERED_SR_DEGRADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find a network interface with the specified device name and MAC address..
        /// </summary>
        public static string COULD_NOT_FIND_NETWORK_INTERFACE_WITH_SPECIFIED_DEVICE_NAME_AND_MAC_ADDRESS {
            get {
                return ResourceManager.GetString("COULD_NOT_FIND_NETWORK_INTERFACE_WITH_SPECIFIED_DEVICE_NAME_AND_MAC_ADDRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while attempting to import a database from a metadata VDI.
        /// </summary>
        public static string COULD_NOT_IMPORT_DATABASE {
            get {
                return ResourceManager.GetString("COULD_NOT_IMPORT_DATABASE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IGMP Snooping setting cannot be applied for some of the host, network(s)..
        /// </summary>
        public static string COULD_NOT_UPDATE_IGMP_SNOOPING_EVERYWHERE {
            get {
                return ResourceManager.GetString("COULD_NOT_UPDATE_IGMP_SNOOPING_EVERYWHERE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CPU does not support masking of features..
        /// </summary>
        public static string CPU_FEATURE_MASKING_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("CPU_FEATURE_MASKING_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A CRL already exists with the specified name..
        /// </summary>
        public static string CRL_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("CRL_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified CRL is corrupt or unreadable..
        /// </summary>
        public static string CRL_CORRUPT {
            get {
                return ResourceManager.GetString("CRL_CORRUPT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified CRL does not exist..
        /// </summary>
        public static string CRL_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("CRL_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified CRL name is invalid..
        /// </summary>
        public static string CRL_NAME_INVALID {
            get {
                return ResourceManager.GetString("CRL_NAME_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation which would have resulted in duplicate keys in the database.  Table: {0}, Field: {1}, Value: {2}.
        /// </summary>
        public static string DB_UNIQUENESS_CONSTRAINT_VIOLATION {
            get {
                return ResourceManager.GetString("DB_UNIQUENESS_CONSTRAINT_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No default SR found.
        /// </summary>
        public static string DEFAULT_SR_NOT_FOUND {
            get {
                return ResourceManager.GetString("DEFAULT_SR_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device {0} is already attached to a VM.
        /// </summary>
        public static string DEVICE_ALREADY_ATTACHED {
            get {
                return ResourceManager.GetString("DEVICE_ALREADY_ATTACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device {0} is not currently attached.
        /// </summary>
        public static string DEVICE_ALREADY_DETACHED {
            get {
                return ResourceManager.GetString("DEVICE_ALREADY_DETACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is already a disk at position {0} on the selected VM.
        /// </summary>
        public static string DEVICE_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("DEVICE_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A timeout happened while attempting to attach a device {1} of type {0} to a VM.
        /// </summary>
        public static string DEVICE_ATTACH_TIMEOUT {
            get {
                return ResourceManager.GetString("DEVICE_ATTACH_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM rejected the attempt to detach the device {1} of type {0}. {2}.
        /// </summary>
        public static string DEVICE_DETACH_REJECTED {
            get {
                return ResourceManager.GetString("DEVICE_DETACH_REJECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A timeout happened while attempting to detach a device {1} of type {0} from a VM.
        /// </summary>
        public static string DEVICE_DETACH_TIMEOUT {
            get {
                return ResourceManager.GetString("DEVICE_DETACH_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because the VBD was not connected to the VM..
        /// </summary>
        public static string DEVICE_NOT_ATTACHED {
            get {
                return ResourceManager.GetString("DEVICE_NOT_ATTACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All VBDs of type &apos;disk&apos; must be read/write for HVM guests.
        /// </summary>
        public static string DISK_VBD_MUST_BE_READWRITE_FOR_HVM {
            get {
                return ResourceManager.GetString("DISK_VBD_MUST_BE_READWRITE_FOR_HVM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error generated by the domain builder..
        /// </summary>
        public static string DOMAIN_BUILDER_ERROR {
            get {
                return ResourceManager.GetString("DOMAIN_BUILDER_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because a domain still exists for the specified VM..
        /// </summary>
        public static string DOMAIN_EXISTS {
            get {
                return ResourceManager.GetString("DOMAIN_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This MAC seed is already in use by a VM in the pool.
        /// </summary>
        public static string DUPLICATE_MAC_SEED {
            get {
                return ResourceManager.GetString("DUPLICATE_MAC_SEED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A PIF with this specified device name already exists..
        /// </summary>
        public static string DUPLICATE_PIF_DEVICE_NAME {
            get {
                return ResourceManager.GetString("DUPLICATE_PIF_DEVICE_NAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot restore this VM because it would create a duplicate.
        /// </summary>
        public static string DUPLICATE_VM {
            get {
                return ResourceManager.GetString("DUPLICATE_VM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No other server available to nominate as master.  Please add or enable some other servers..
        /// </summary>
        public static string EVACUATE_NO_OTHER_HOSTS_FOR_MASTER {
            get {
                return ResourceManager.GetString("EVACUATE_NO_OTHER_HOSTS_FOR_MASTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The event.from token could not be parsed. Valid values include: &apos;&apos;, and a value returned from a previous event.from call..
        /// </summary>
        public static string EVENT_FROM_TOKEN_PARSE_FAILURE {
            get {
                return ResourceManager.GetString("EVENT_FROM_TOKEN_PARSE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server failed to parse your event subscription. Valid values include: *, class-name, class-name/object-reference..
        /// </summary>
        public static string EVENT_SUBSCRIPTION_PARSE_FAILURE {
            get {
                return ResourceManager.GetString("EVENT_SUBSCRIPTION_PARSE_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some events have been lost from the queue and cannot be retrieved..
        /// </summary>
        public static string EVENTS_LOST {
            get {
                return ResourceManager.GetString("EVENTS_LOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An emulator required to run this VM failed to start.
        /// </summary>
        public static string FAILED_TO_START_EMULATOR {
            get {
                return ResourceManager.GetString("FAILED_TO_START_EMULATOR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM is set up to use a feature that requires it to boot as HVM..
        /// </summary>
        public static string FEATURE_REQUIRES_HVM {
            get {
                return ResourceManager.GetString("FEATURE_REQUIRES_HVM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The use of this feature is restricted..
        /// </summary>
        public static string FEATURE_RESTRICTED {
            get {
                return ResourceManager.GetString("FEATURE_RESTRICTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to One of the fields you supplied was of the wrong type..
        /// </summary>
        public static string FIELD_TYPE_ERROR {
            get {
                return ResourceManager.GetString("FIELD_TYPE_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GPU group does not contain any GPUs..
        /// </summary>
        public static string GPU_GROUP_CONTAINS_NO_PGPUS {
            get {
                return ResourceManager.GetString("GPU_GROUP_CONTAINS_NO_PGPUS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GPU group contains active GPUs and cannot be deleted..
        /// </summary>
        public static string GPU_GROUP_CONTAINS_PGPU {
            get {
                return ResourceManager.GetString("GPU_GROUP_CONTAINS_PGPU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The GPU group contains active virtual GPUs and cannot be deleted..
        /// </summary>
        public static string GPU_GROUP_CONTAINS_VGPU {
            get {
                return ResourceManager.GetString("GPU_GROUP_CONTAINS_VGPU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This server cannot accept the proposed new master setting at this time..
        /// </summary>
        public static string HA_ABORT_NEW_MASTER {
            get {
                return ResourceManager.GetString("HA_ABORT_NEW_MASTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed because creating or deleting a bond involving the management interface is not allowed while HA is on. In order to do that, disable HA, create or delete the bond then re-enable HA..
        /// </summary>
        public static string HA_CANNOT_CHANGE_BOND_STATUS_OF_MGMT_IFACE {
            get {
                return ResourceManager.GetString("HA_CANNOT_CHANGE_BOND_STATUS_OF_MGMT_IFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed because the referenced network is not properly shared. The network must either be entirely virtual or must be physically present via a currently attached PIF on every server..
        /// </summary>
        public static string HA_CONSTRAINT_VIOLATION_NETWORK_NOT_SHARED {
            get {
                return ResourceManager.GetString("HA_CONSTRAINT_VIOLATION_NETWORK_NOT_SHARED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed because the referenced SR is not properly shared. The SR must both be marked as shared and a currently attached PBD must exist for each server..
        /// </summary>
        public static string HA_CONSTRAINT_VIOLATION_SR_NOT_SHARED {
            get {
                return ResourceManager.GetString("HA_CONSTRAINT_VIOLATION_SR_NOT_SHARED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because HA disable is in progress.
        /// </summary>
        public static string HA_DISABLE_IN_PROGRESS {
            get {
                return ResourceManager.GetString("HA_DISABLE_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because HA enable is in progress.
        /// </summary>
        public static string HA_ENABLE_IN_PROGRESS {
            get {
                return ResourceManager.GetString("HA_ENABLE_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HA could not be enabled on the Pool because a liveset could not be formed: check storage and network heartbeat paths..
        /// </summary>
        public static string HA_FAILED_TO_FORM_LIVESET {
            get {
                return ResourceManager.GetString("HA_FAILED_TO_FORM_LIVESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server could not join the liveset because the HA daemon failed to start..
        /// </summary>
        public static string HA_HEARTBEAT_DAEMON_STARTUP_FAILED {
            get {
                return ResourceManager.GetString("HA_HEARTBEAT_DAEMON_STARTUP_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server could not join the liveset because the HA daemon could not access the heartbeat disk..
        /// </summary>
        public static string HA_HOST_CANNOT_ACCESS_STATEFILE {
            get {
                return ResourceManager.GetString("HA_HOST_CANNOT_ACCESS_STATEFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation failed because the HA software on the specified server could not see a subset of other servers. Check your network connectivity..
        /// </summary>
        public static string HA_HOST_CANNOT_SEE_PEERS {
            get {
                return ResourceManager.GetString("HA_HOST_CANNOT_SEE_PEERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed while the server is still armed; it must be disarmed first.
        /// </summary>
        public static string HA_HOST_IS_ARMED {
            get {
                return ResourceManager.GetString("HA_HOST_IS_ARMED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because HA is enabled on the Pool.
        /// </summary>
        public static string HA_IS_ENABLED {
            get {
                return ResourceManager.GetString("HA_IS_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This server lost access to the HA statefile..
        /// </summary>
        public static string HA_LOST_STATEFILE {
            get {
                return ResourceManager.GetString("HA_LOST_STATEFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find a plan for placement of VMs as there are no other servers available..
        /// </summary>
        public static string HA_NO_PLAN {
            get {
                return ResourceManager.GetString("HA_NO_PLAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because HA is not enabled on the Pool.
        /// </summary>
        public static string HA_NOT_ENABLED {
            get {
                return ResourceManager.GetString("HA_NOT_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because the HA software is not installed on this server..
        /// </summary>
        public static string HA_NOT_INSTALLED {
            get {
                return ResourceManager.GetString("HA_NOT_INSTALLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed because HA would no longer be guaranteed for this pool.  To perform this operation anyway, you must disable or reconfigure HA..
        /// </summary>
        public static string HA_OPERATION_WOULD_BREAK_FAILOVER_PLAN {
            get {
                return ResourceManager.GetString("HA_OPERATION_WOULD_BREAK_FAILOVER_PLAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This server cannot join the pool because the pool has HA enabled but this server has HA disabled..
        /// </summary>
        public static string HA_POOL_IS_ENABLED_BUT_HOST_IS_DISABLED {
            get {
                return ResourceManager.GetString("HA_POOL_IS_ENABLED_BUT_HOST_IS_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server cannot rejoin pool because it should have fenced (it is not in the master&apos;s partition).
        /// </summary>
        public static string HA_SHOULD_BE_FENCED {
            get {
                return ResourceManager.GetString("HA_SHOULD_BE_FENCED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HA can only be enabled for 2 servers or more. Note that 2 servers requires a pre-configured quorum tiebreak script..
        /// </summary>
        public static string HA_TOO_FEW_HOSTS {
            get {
                return ResourceManager.GetString("HA_TOO_FEW_HOSTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Object has been deleted.{0}:{1}.
        /// </summary>
        public static string HANDLE_INVALID {
            get {
                return ResourceManager.GetString("HANDLE_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This server failed in the middle of an automatic failover operation and needs to retry the failover action.
        /// </summary>
        public static string HOST_BROKEN {
            get {
                return ResourceManager.GetString("HOST_BROKEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server cannot attach network (in the case of NIC bonding, this may be because attaching the network on this server would require other networks [that are currently active] to be taken down)..
        /// </summary>
        public static string HOST_CANNOT_ATTACH_NETWORK {
            get {
                return ResourceManager.GetString("HOST_CANNOT_ATTACH_NETWORK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot attach network.
        /// </summary>
        public static string HOST_CANNOT_ATTACH_NETWORK_SHORT {
            get {
                return ResourceManager.GetString("HOST_CANNOT_ATTACH_NETWORK-SHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This server cannot destroy itself..
        /// </summary>
        public static string HOST_CANNOT_DESTROY_SELF {
            get {
                return ResourceManager.GetString("HOST_CANNOT_DESTROY_SELF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The metrics of this server could not be read..
        /// </summary>
        public static string HOST_CANNOT_READ_METRICS {
            get {
                return ResourceManager.GetString("HOST_CANNOT_READ_METRICS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM could not start because the CD drive is empty..
        /// </summary>
        public static string HOST_CD_DRIVE_EMPTY {
            get {
                return ResourceManager.GetString("HOST_CD_DRIVE_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified server is disabled..
        /// </summary>
        public static string HOST_DISABLED {
            get {
                return ResourceManager.GetString("HOST_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        public static string HOST_DISABLED_SHORT {
            get {
                return ResourceManager.GetString("HOST_DISABLED-SHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified server is disabled and cannot be re-enabled until after it has rebooted..
        /// </summary>
        public static string HOST_DISABLED_UNTIL_REBOOT {
            get {
                return ResourceManager.GetString("HOST_DISABLED_UNTIL_REBOOT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This host is being evacuated..
        /// </summary>
        public static string HOST_EVACUATE_IN_PROGRESS {
            get {
                return ResourceManager.GetString("HOST_EVACUATE_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server failed to acquire an IP address on its management interface and therefore cannot contact the master..
        /// </summary>
        public static string HOST_HAS_NO_MANAGEMENT_IP {
            get {
                return ResourceManager.GetString("HOST_HAS_NO_MANAGEMENT_IP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This server can not be forgotten because there are some user VMs still running.
        /// </summary>
        public static string HOST_HAS_RESIDENT_VMS {
            get {
                return ResourceManager.GetString("HOST_HAS_RESIDENT_VMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This server is in emergency mode.
        /// </summary>
        public static string HOST_IN_EMERGENCY_MODE {
            get {
                return ResourceManager.GetString("HOST_IN_EMERGENCY_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The backup could not be performed because the server is in recovery mode.
        /// </summary>
        public static string HOST_IN_RECOVERY_MODE {
            get {
                return ResourceManager.GetString("HOST_IN_RECOVERY_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be completed because the server is in use..
        /// </summary>
        public static string HOST_IN_USE {
            get {
                return ResourceManager.GetString("HOST_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be completed because the server is still live..
        /// </summary>
        public static string HOST_IS_LIVE {
            get {
                return ResourceManager.GetString("HOST_IS_LIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server that you are talking to is a slave.
        /// </summary>
        public static string HOST_IS_SLAVE {
            get {
                return ResourceManager.GetString("HOST_IS_SLAVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host is its own slave. Please use pool-emergency-transition-to-master or pool-emergency-reset-master..
        /// </summary>
        public static string HOST_ITS_OWN_SLAVE {
            get {
                return ResourceManager.GetString("HOST_ITS_OWN_SLAVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The master reports that it cannot talk back to the slave on the supplied management IP address..
        /// </summary>
        public static string HOST_MASTER_CANNOT_TALK_BACK {
            get {
                return ResourceManager.GetString("HOST_MASTER_CANNOT_TALK_BACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server name is invalid..
        /// </summary>
        public static string HOST_NAME_INVALID {
            get {
                return ResourceManager.GetString("HOST_NAME_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This server cannot be enabled as it is not disabled..
        /// </summary>
        public static string HOST_NOT_DISABLED {
            get {
                return ResourceManager.GetString("HOST_NOT_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough server memory is available to perform this operation.
        /// </summary>
        public static string HOST_NOT_ENOUGH_FREE_MEMORY {
            get {
                return ResourceManager.GetString("HOST_NOT_ENOUGH_FREE_MEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not enough free memory.
        /// </summary>
        public static string HOST_NOT_ENOUGH_FREE_MEMORY_SHORT {
            get {
                return ResourceManager.GetString("HOST_NOT_ENOUGH_FREE_MEMORY-SHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The restore could not be performed because the server is not in recovery mode.
        /// </summary>
        public static string HOST_NOT_IN_RECOVERY_MODE {
            get {
                return ResourceManager.GetString("HOST_NOT_IN_RECOVERY_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be completed as the server is not live..
        /// </summary>
        public static string HOST_NOT_LIVE {
            get {
                return ResourceManager.GetString("HOST_NOT_LIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unreachable.
        /// </summary>
        public static string HOST_NOT_LIVE_SHORT {
            get {
                return ResourceManager.GetString("HOST_NOT_LIVE-SHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server could not be contacted.
        /// </summary>
        public static string HOST_OFFLINE {
            get {
                return ResourceManager.GetString("HOST_OFFLINE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be completed because the server power on mode is disabled..
        /// </summary>
        public static string HOST_POWER_ON_MODE_DISABLED {
            get {
                return ResourceManager.GetString("HOST_POWER_ON_MODE_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server is still booting..
        /// </summary>
        public static string HOST_STILL_BOOTING {
            get {
                return ResourceManager.GetString("HOST_STILL_BOOTING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The master says the server is not known to it. Perhaps the server was deleted from the master&apos;s database?.
        /// </summary>
        public static string HOST_UNKNOWN_TO_MASTER {
            get {
                return ResourceManager.GetString("HOST_UNKNOWN_TO_MASTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The hosts in this pool are not compatible..
        /// </summary>
        public static string HOSTS_NOT_COMPATIBLE {
            get {
                return ResourceManager.GetString("HOSTS_NOT_COMPATIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The servers in this pool are not homogeneous. {0}.
        /// </summary>
        public static string HOSTS_NOT_HOMOGENEOUS {
            get {
                return ResourceManager.GetString("HOSTS_NOT_HOMOGENEOUS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VBD device is not recognized: please use a non-negative integer.
        /// </summary>
        public static string ILLEGAL_VBD_DEVICE {
            get {
                return ResourceManager.GetString("ILLEGAL_VBD_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This file could not be imported.
        /// </summary>
        public static string IMPORT_ERROR {
            get {
                return ResourceManager.GetString("IMPORT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM could not be imported because attached disks could not be found..
        /// </summary>
        public static string IMPORT_ERROR_ATTACHED_DISKS_NOT_FOUND {
            get {
                return ResourceManager.GetString("IMPORT_ERROR_ATTACHED_DISKS_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot import VM using chunked encoding..
        /// </summary>
        public static string IMPORT_ERROR_CANNOT_HANDLE_CHUNKED {
            get {
                return ResourceManager.GetString("IMPORT_ERROR_CANNOT_HANDLE_CHUNKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM could not be imported because a required object could not be found..
        /// </summary>
        public static string IMPORT_ERROR_FAILED_TO_FIND_OBJECT {
            get {
                return ResourceManager.GetString("IMPORT_ERROR_FAILED_TO_FIND_OBJECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM could not be imported; the end of the file was reached prematurely..
        /// </summary>
        public static string IMPORT_ERROR_PREMATURE_EOF {
            get {
                return ResourceManager.GetString("IMPORT_ERROR_PREMATURE_EOF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some data checksums were incorrect; the VM may be corrupt..
        /// </summary>
        public static string IMPORT_ERROR_SOME_CHECKSUMS_FAILED {
            get {
                return ResourceManager.GetString("IMPORT_ERROR_SOME_CHECKSUMS_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM could not be imported because the XVA file is invalid: an unexpected file was encountered..
        /// </summary>
        public static string IMPORT_ERROR_UNEXPECTED_FILE {
            get {
                return ResourceManager.GetString("IMPORT_ERROR_UNEXPECTED_FILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot import on this server because it was saved on an incompatible version.
        /// </summary>
        public static string IMPORT_INCOMPATIBLE_VERSION {
            get {
                return ResourceManager.GetString("IMPORT_INCOMPATIBLE_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed, because it is incompatible with the currently active HA cluster stack..
        /// </summary>
        public static string INCOMPATIBLE_CLUSTER_STACK_ACTIVE {
            get {
                return ResourceManager.GetString("INCOMPATIBLE_CLUSTER_STACK_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to These PIFs can not be bonded, because their properties are different..
        /// </summary>
        public static string INCOMPATIBLE_PIF_PROPERTIES {
            get {
                return ResourceManager.GetString("INCOMPATIBLE_PIF_PROPERTIES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified SR is incompatible with the selected HA cluster stack..
        /// </summary>
        public static string INCOMPATIBLE_STATEFILE_SR {
            get {
                return ResourceManager.GetString("INCOMPATIBLE_STATEFILE_SR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified interface cannot be used because it has no IP address.
        /// </summary>
        public static string INTERFACE_HAS_NO_IP {
            get {
                return ResourceManager.GetString("INTERFACE_HAS_NO_IP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Internal error: {0}.
        /// </summary>
        public static string INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required parameter contained an invalid CIDR address (&lt;addr&gt;/&lt;prefix length&gt;).
        /// </summary>
        public static string INVALID_CIDR_ADDRESS_SPECIFIED {
            get {
                return ResourceManager.GetString("INVALID_CIDR_ADDRESS_SPECIFIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device name {0} is invalid.
        /// </summary>
        public static string INVALID_DEVICE {
            get {
                return ResourceManager.GetString("INVALID_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license type you supplied is invalid..
        /// </summary>
        public static string INVALID_EDITION {
            get {
                return ResourceManager.GetString("INVALID_EDITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given feature string is not valid..
        /// </summary>
        public static string INVALID_FEATURE_STRING {
            get {
                return ResourceManager.GetString("INVALID_FEATURE_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A required parameter contained an invalid IP address.
        /// </summary>
        public static string INVALID_IP_ADDRESS_SPECIFIED {
            get {
                return ResourceManager.GetString("INVALID_IP_ADDRESS_SPECIFIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The uploaded update file is invalid.
        /// </summary>
        public static string INVALID_PATCH {
            get {
                return ResourceManager.GetString("INVALID_PATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The uploaded update file is invalid..
        /// </summary>
        public static string INVALID_PATCH_WITH_LOG {
            get {
                return ResourceManager.GetString("INVALID_PATCH_WITH_LOG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The uploaded update package is invalid..
        /// </summary>
        public static string INVALID_UPDATE {
            get {
                return ResourceManager.GetString("INVALID_UPDATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{1}&apos; is invalid for field &apos;{0}&apos;..
        /// </summary>
        public static string INVALID_VALUE {
            get {
                return ResourceManager.GetString("INVALID_VALUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You tried to create a VLAN or tunnel on top of a tunnel access PIF - use the underlying transport PIF instead..
        /// </summary>
        public static string IS_TUNNEL_ACCESS_PIF {
            get {
                return ResourceManager.GetString("IS_TUNNEL_ACCESS_PIF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server joining the pool cannot already be a master of another pool..
        /// </summary>
        public static string JOINING_HOST_CANNOT_BE_MASTER_OF_OTHER_HOSTS {
            get {
                return ResourceManager.GetString("JOINING_HOST_CANNOT_BE_MASTER_OF_OTHER_HOSTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server joining the pool cannot contain any shared storage..
        /// </summary>
        public static string JOINING_HOST_CANNOT_CONTAIN_SHARED_SRS {
            get {
                return ResourceManager.GetString("JOINING_HOST_CANNOT_CONTAIN_SHARED_SRS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server joining the pool cannot have any running or suspended VMs..
        /// </summary>
        public static string JOINING_HOST_CANNOT_HAVE_RUNNING_OR_SUSPENDED_VMS {
            get {
                return ResourceManager.GetString("JOINING_HOST_CANNOT_HAVE_RUNNING_OR_SUSPENDED_VMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server joining the pool cannot have any running VMs..
        /// </summary>
        public static string JOINING_HOST_CANNOT_HAVE_RUNNING_VMS {
            get {
                return ResourceManager.GetString("JOINING_HOST_CANNOT_HAVE_RUNNING_VMS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Joining server cannot have VMs with any current operations.
        /// </summary>
        public static string JOINING_HOST_CANNOT_HAVE_VMS_WITH_CURRENT_OPERATIONS {
            get {
                return ResourceManager.GetString("JOINING_HOST_CANNOT_HAVE_VMS_WITH_CURRENT_OPERATIONS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The connection to the joining server failed.
        /// </summary>
        public static string JOINING_HOST_CONNECTION_FAILED {
            get {
                return ResourceManager.GetString("JOINING_HOST_CONNECTION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error connecting to the server. the service contacted didn&apos;t reply properly..
        /// </summary>
        public static string JOINING_HOST_SERVICE_FAILED {
            get {
                return ResourceManager.GetString("JOINING_HOST_SERVICE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not allowed with your current license.
        /// </summary>
        public static string LICENCE_RESTRICTION {
            get {
                return ResourceManager.GetString("LICENCE_RESTRICTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot downgrade license while in pool. Please disband the pool first, then downgrade licenses on servers separately..
        /// </summary>
        public static string LICENSE_CANNOT_DOWNGRADE_WHILE_IN_POOL {
            get {
                return ResourceManager.GetString("LICENSE_CANNOT_DOWNGRADE_WHILE_IN_POOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license type you requested is not available..
        /// </summary>
        public static string LICENSE_CHECKOUT_ERROR {
            get {
                return ResourceManager.GetString("LICENSE_CHECKOUT_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This server cannot join a pool because its license does not support pooling.
        /// </summary>
        public static string LICENSE_DOES_NOT_SUPPORT_POOLING {
            get {
                return ResourceManager.GetString("LICENSE_DOES_NOT_SUPPORT_POOLING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HA cannot be enabled because this server&apos;s license does not allow it.
        /// </summary>
        public static string LICENSE_DOES_NOT_SUPPORT_XHA {
            get {
                return ResourceManager.GetString("LICENSE_DOES_NOT_SUPPORT_XHA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your license has expired.
        /// </summary>
        public static string LICENSE_EXPIRED {
            get {
                return ResourceManager.GetString("LICENSE_EXPIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This type of license file is for previous versions of the server. Please upgrade to the new licensing system..
        /// </summary>
        public static string LICENSE_FILE_DEPRECATED {
            get {
                return ResourceManager.GetString("LICENSE_FILE_DEPRECATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Host and pool have incompatible licenses..
        /// </summary>
        public static string LICENSE_HOST_POOL_MISMATCH {
            get {
                return ResourceManager.GetString("LICENSE_HOST_POOL_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error processing your license.  Please contact your support representative.
        /// </summary>
        public static string LICENSE_PROCESSING_ERROR {
            get {
                return ResourceManager.GetString("LICENSE_PROCESSING_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server was unable to contact your domain server. Check your settings are correct and that a route to the server exists..
        /// </summary>
        public static string LIKEWISE_WINERROR_0251E {
            get {
                return ResourceManager.GetString("LIKEWISE_WINERROR_0251E", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A VDI with the specified location already exists within the SR.
        /// </summary>
        public static string LOCATION_NOT_UNIQUE {
            get {
                return ResourceManager.GetString("LOCATION_NOT_UNIQUE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MAC address specified doesn&apos;t exist on this server..
        /// </summary>
        public static string MAC_DOES_NOT_EXIST {
            get {
                return ResourceManager.GetString("MAC_DOES_NOT_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MAC address specified is not valid..
        /// </summary>
        public static string MAC_INVALID {
            get {
                return ResourceManager.GetString("MAC_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The MAC address specified still exists on this server..
        /// </summary>
        public static string MAC_STILL_EXISTS {
            get {
                return ResourceManager.GetString("MAC_STILL_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to INTERNAL ERROR: Attempted to set &apos;{0}&apos;.&apos;{1}&apos;:&apos;{3}&apos;=&apos;{2}&apos;, but the key &apos;{3}&apos; was already present in map &apos;{1}&apos;..
        /// </summary>
        public static string MAP_DUPLICATE_KEY {
            get {
                return ResourceManager.GetString("MAP_DUPLICATE_KEY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have reached the maximum amount of memory allowed for this virtual machine..
        /// </summary>
        public static string MEM_MAX_ALLOWED {
            get {
                return ResourceManager.GetString("MEM_MAX_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum amount of memory allowed.
        /// </summary>
        public static string MEM_MAX_ALLOWED_TITLE {
            get {
                return ResourceManager.GetString("MEM_MAX_ALLOWED_TITLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The dynamic memory range does not satisfy the following constraint..
        /// </summary>
        public static string MEMORY_CONSTRAINT_VIOLATION {
            get {
                return ResourceManager.GetString("MEMORY_CONSTRAINT_VIOLATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This message has been deprecated..
        /// </summary>
        public static string MESSAGE_DEPRECATED {
            get {
                return ResourceManager.GetString("MESSAGE_DEPRECATED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You tried to call a method that does not exist.  The method name that you used is {0}..
        /// </summary>
        public static string MESSAGE_METHOD_UNKNOWN {
            get {
                return ResourceManager.GetString("MESSAGE_METHOD_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You tried to call the method {0} with the incorrect number of parameters {2}.  The method expect {1} parameter(s)..
        /// </summary>
        public static string MESSAGE_PARAMETER_COUNT_MISMATCH {
            get {
                return ResourceManager.GetString("MESSAGE_PARAMETER_COUNT_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This function is no longer available..
        /// </summary>
        public static string MESSAGE_REMOVED {
            get {
                return ResourceManager.GetString("MESSAGE_REMOVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VDI mirroring cannot be performed.
        /// </summary>
        public static string MIRROR_FAILED {
            get {
                return ResourceManager.GetString("MIRROR_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The license-server connection details (address or port) were missing or incomplete..
        /// </summary>
        public static string MISSING_CONNECTION_DETAILS {
            get {
                return ResourceManager.GetString("MISSING_CONNECTION_DETAILS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You tried to create a PIF, but the network {0} you tried to attach it to is already attached to some other PIF {1}, and so the creation failed..
        /// </summary>
        public static string NETWORK_ALREADY_CONNECTED {
            get {
                return ResourceManager.GetString("NETWORK_ALREADY_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network contains active PIFs ({0}) and cannot be deleted..
        /// </summary>
        public static string NETWORK_CONTAINS_PIF {
            get {
                return ResourceManager.GetString("NETWORK_CONTAINS_PIF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network contains active VIFs ({0}) and cannot be deleted..
        /// </summary>
        public static string NETWORK_CONTAINS_VIF {
            get {
                return ResourceManager.GetString("NETWORK_CONTAINS_VIF", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You tried to add a purpose to a network but the new purpose is not compatible with an existing purpose of the network or other networks..
        /// </summary>
        public static string NETWORK_INCOMPATIBLE_PURPOSES {
            get {
                return ResourceManager.GetString("NETWORK_INCOMPATIBLE_PURPOSES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The network is not managed by xapi..
        /// </summary>
        public static string NETWORK_UNMANAGED {
            get {
                return ResourceManager.GetString("NETWORK_UNMANAGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There were no servers available to complete the specified operation..
        /// </summary>
        public static string NO_HOSTS_AVAILABLE {
            get {
                return ResourceManager.GetString("NO_HOSTS_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The upper limit of active redo log instances was reached..
        /// </summary>
        public static string NO_MORE_REDO_LOGS_ALLOWED {
            get {
                return ResourceManager.GetString("NO_MORE_REDO_LOGS_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command is not allowed on the OEM edition..
        /// </summary>
        public static string NOT_ALLOWED_ON_OEM_EDITION {
            get {
                return ResourceManager.GetString("NOT_ALLOWED_ON_OEM_EDITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The function {0} is not implemented.
        /// </summary>
        public static string NOT_IMPLEMENTED {
            get {
                return ResourceManager.GetString("NOT_IMPLEMENTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This pool is not in emergency mode..
        /// </summary>
        public static string NOT_IN_EMERGENCY_MODE {
            get {
                return ResourceManager.GetString("NOT_IN_EMERGENCY_MODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not supported during an upgrade.
        /// </summary>
        public static string NOT_SUPPORTED_DURING_UPGRADE {
            get {
                return ResourceManager.GetString("NOT_SUPPORTED_DURING_UPGRADE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given VM is not registered as a system domain. This operation can only be performed on a registered system domain..
        /// </summary>
        public static string NOT_SYSTEM_DOMAIN {
            get {
                return ResourceManager.GetString("NOT_SYSTEM_DOMAIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Nvidia tools error. Please ensure that the latest Nvidia tools are installed.
        /// </summary>
        public static string NVIDIA_TOOLS_ERROR {
            get {
                return ResourceManager.GetString("NVIDIA_TOOLS_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified object no longer exists..
        /// </summary>
        public static string OBJECT_NOLONGER_EXISTS {
            get {
                return ResourceManager.GetString("OBJECT_NOLONGER_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This command is only allowed on the OEM edition..
        /// </summary>
        public static string ONLY_ALLOWED_ON_OEM_EDITION {
            get {
                return ResourceManager.GetString("ONLY_ALLOWED_ON_OEM_EDITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation needs the OpenVSwitch networking backend to be enabled..
        /// </summary>
        public static string OPENVSWITCH_NOT_ACTIVE {
            get {
                return ResourceManager.GetString("OPENVSWITCH_NOT_ACTIVE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation that was explicitly blocked (see the blocked_operations field of the given object). The administrator provided the following message: {1}..
        /// </summary>
        public static string OPERATION_BLOCKED {
            get {
                return ResourceManager.GetString("OPERATION_BLOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation that was not allowed. {0}.
        /// </summary>
        public static string OPERATION_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("OPERATION_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some VMs belonging to the appliance threw an exception while carrying out the specified operation.
        /// </summary>
        public static string OPERATION_PARTIALLY_FAILED {
            get {
                return ResourceManager.GetString("OPERATION_PARTIALLY_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Another operation involving the object is currently in progress.
        /// </summary>
        public static string OTHER_OPERATION_IN_PROGRESS {
            get {
                return ResourceManager.GetString("OTHER_OPERATION_IN_PROGRESS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is not enough space to upload the update.
        /// </summary>
        public static string OUT_OF_SPACE {
            get {
                return ResourceManager.GetString("OUT_OF_SPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The passthrough_enabled must be true before passthrough usb to vm..
        /// </summary>
        public static string PASSTHROUGH_NOT_ENABLED {
            get {
                return ResourceManager.GetString("PASSTHROUGH_NOT_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update {0} has already been applied.
        /// </summary>
        public static string PATCH_ALREADY_APPLIED {
            get {
                return ResourceManager.GetString("PATCH_ALREADY_APPLIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The uploaded update already exists.
        /// </summary>
        public static string PATCH_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("PATCH_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update failed to apply. View logs for more details..
        /// </summary>
        public static string PATCH_APPLY_FAILED {
            get {
                return ResourceManager.GetString("PATCH_APPLY_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The patch apply failed: backup files were created while applying the patch. Please remove these backup files before applying the patch again..
        /// </summary>
        public static string PATCH_APPLY_FAILED_BACKUP_FILES_EXIST {
            get {
                return ResourceManager.GetString("PATCH_APPLY_FAILED_BACKUP_FILES_EXIST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified patch is applied and cannot be destroyed..
        /// </summary>
        public static string PATCH_IS_APPLIED {
            get {
                return ResourceManager.GetString("PATCH_IS_APPLIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Tools ISO must be ejected from all running VMs in the pool..
        /// </summary>
        public static string PATCH_PRECHECK_FAILED_ISO_MOUNTED {
            get {
                return ResourceManager.GetString("PATCH_PRECHECK_FAILED_ISO_MOUNTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The patch precheck stage failed: the server does not have enough space..
        /// </summary>
        public static string PATCH_PRECHECK_FAILED_OUT_OF_SPACE {
            get {
                return ResourceManager.GetString("PATCH_PRECHECK_FAILED_OUT_OF_SPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update precheck stage failed: prerequisite updates are missing..
        /// </summary>
        public static string PATCH_PRECHECK_FAILED_PREREQUISITE_MISSING {
            get {
                return ResourceManager.GetString("PATCH_PRECHECK_FAILED_PREREQUISITE_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update precheck stage failed with an unknown error..
        /// </summary>
        public static string PATCH_PRECHECK_FAILED_UNKNOWN_ERROR {
            get {
                return ResourceManager.GetString("PATCH_PRECHECK_FAILED_UNKNOWN_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update precheck stage failed: there are one or more VMs still running on the server.  All VMs must be shut down or suspended before the update can be applied..
        /// </summary>
        public static string PATCH_PRECHECK_FAILED_VM_RUNNING {
            get {
                return ResourceManager.GetString("PATCH_PRECHECK_FAILED_VM_RUNNING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current build number ({1}) is incompatible with the update build number ({2})..
        /// </summary>
        public static string PATCH_PRECHECK_FAILED_WRONG_SERVER_BUILD {
            get {
                return ResourceManager.GetString("PATCH_PRECHECK_FAILED_WRONG_SERVER_BUILD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The current version number ({1}) is incompatible with the update version number regular expression ({2})..
        /// </summary>
        public static string PATCH_PRECHECK_FAILED_WRONG_SERVER_VERSION {
            get {
                return ResourceManager.GetString("PATCH_PRECHECK_FAILED_WRONG_SERVER_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A PBD already exists connecting the SR to the server.
        /// </summary>
        public static string PBD_EXISTS {
            get {
                return ResourceManager.GetString("PBD_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Caller not allowed to perform this operation..
        /// </summary>
        public static string PERMISSION_DENIED {
            get {
                return ResourceManager.GetString("PERMISSION_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This GPU is currently in use by running VMs..
        /// </summary>
        public static string PGPU_IN_USE_BY_VM {
            get {
                return ResourceManager.GetString("PGPU_IN_USE_BY_VM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is insufficient capacity on this GPU to run the virtual GPU..
        /// </summary>
        public static string PGPU_INSUFFICIENT_CAPACITY_FOR_VGPU {
            get {
                return ResourceManager.GetString("PGPU_INSUFFICIENT_CAPACITY_FOR_VGPU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GPU type not compatible with destination group..
        /// </summary>
        public static string PGPU_NOT_COMPATIBLE_WITH_GPU_GROUP {
            get {
                return ResourceManager.GetString("PGPU_NOT_COMPATIBLE_WITH_GPU_GROUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot create a bond of an interface which is a member of an existing bond..
        /// </summary>
        public static string PIF_ALREADY_BONDED {
            get {
                return ResourceManager.GetString("PIF_ALREADY_BONDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only one PIF on a bond is allowed to have an IP configuration..
        /// </summary>
        public static string PIF_BOND_MORE_THAN_ONE_IP {
            get {
                return ResourceManager.GetString("PIF_BOND_MORE_THAN_ONE_IP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A bond must consist of at least two member interfaces.
        /// </summary>
        public static string PIF_BOND_NEEDS_MORE_MEMBERS {
            get {
                return ResourceManager.GetString("PIF_BOND_NEEDS_MORE_MEMBERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot bond interfaces across different servers..
        /// </summary>
        public static string PIF_CANNOT_BOND_CROSS_HOST {
            get {
                return ResourceManager.GetString("PIF_CANNOT_BOND_CROSS_HOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An unknown error occurred while attempting to configure an interface..
        /// </summary>
        public static string PIF_CONFIGURATION_ERROR {
            get {
                return ResourceManager.GetString("PIF_CONFIGURATION_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified device was not found..
        /// </summary>
        public static string PIF_DEVICE_NOT_FOUND {
            get {
                return ResourceManager.GetString("PIF_DEVICE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation you requested cannot be performed because the specified PIF does not allow unplug..
        /// </summary>
        public static string PIF_DOES_NOT_ALLOW_UNPLUG {
            get {
                return ResourceManager.GetString("PIF_DOES_NOT_ALLOW_UNPLUG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PIF has no network configuration.
        /// </summary>
        public static string PIF_HAS_NO_NETWORK_CONFIGURATION {
            get {
                return ResourceManager.GetString("PIF_HAS_NO_NETWORK_CONFIGURATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PIF has no IPv6 configuration (mode currently set to &apos;none&apos;).
        /// </summary>
        public static string PIF_HAS_NO_V6_NETWORK_CONFIGURATION {
            get {
                return ResourceManager.GetString("PIF_HAS_NO_V6_NETWORK_CONFIGURATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The primary address types are not compatible.
        /// </summary>
        public static string PIF_INCOMPATIBLE_PRIMARY_ADDRESS_TYPE {
            get {
                return ResourceManager.GetString("PIF_INCOMPATIBLE_PRIMARY_ADDRESS_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to PIF is the management interface..
        /// </summary>
        public static string PIF_IS_MANAGEMENT_INTERFACE {
            get {
                return ResourceManager.GetString("PIF_IS_MANAGEMENT_INTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You tried to destroy the PIF {0}, but it represents an aspect of the physical server configuration, and so cannot be destroyed. .
        /// </summary>
        public static string PIF_IS_PHYSICAL {
            get {
                return ResourceManager.GetString("PIF_IS_PHYSICAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You tried to create a VLAN on top of another VLAN - use the underlying physical PIF/bond instead.
        /// </summary>
        public static string PIF_IS_VLAN {
            get {
                return ResourceManager.GetString("PIF_IS_VLAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This host has no PIF on the given network..
        /// </summary>
        public static string PIF_NOT_PRESENT {
            get {
                return ResourceManager.GetString("PIF_NOT_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation cannot proceed while a tunnel exists on this interface..
        /// </summary>
        public static string PIF_TUNNEL_STILL_EXISTS {
            get {
                return ResourceManager.GetString("PIF_TUNNEL_STILL_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation you requested cannot be performed because the specified PIF is not managed by xapi..
        /// </summary>
        public static string PIF_UNMANAGED {
            get {
                return ResourceManager.GetString("PIF_UNMANAGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VLAN tag already in use.
        /// </summary>
        public static string PIF_VLAN_EXISTS {
            get {
                return ResourceManager.GetString("PIF_VLAN_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation cannot proceed while a VLAN exists on this interface..
        /// </summary>
        public static string PIF_VLAN_STILL_EXISTS {
            get {
                return ResourceManager.GetString("PIF_VLAN_STILL_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External authentication is already enabled for at least one server in this pool..
        /// </summary>
        public static string POOL_AUTH_ALREADY_ENABLED {
            get {
                return ResourceManager.GetString("POOL_AUTH_ALREADY_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External authentication has been disabled with errors: Some AD machine accounts were not disabled successfully on the AD server. .
        /// </summary>
        public static string POOL_AUTH_DISABLE_FAILED {
            get {
                return ResourceManager.GetString("POOL_AUTH_DISABLE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External authentication has been disabled with errors: Some AD machine accounts were not disabled on the AD server due to invalid account..
        /// </summary>
        public static string POOL_AUTH_DISABLE_FAILED_INVALID_ACCOUNT {
            get {
                return ResourceManager.GetString("POOL_AUTH_DISABLE_FAILED_INVALID_ACCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External authentication has been disabled with errors: Some AD machine accounts were not disabled on the AD server as permission was denied..
        /// </summary>
        public static string POOL_AUTH_DISABLE_FAILED_PERMISSION_DENIED {
            get {
                return ResourceManager.GetString("POOL_AUTH_DISABLE_FAILED_PERMISSION_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to External authentication has been disabled with errors: Some AD machine accounts were not disabled on the AD server due to invalid credentials..
        /// </summary>
        public static string POOL_AUTH_DISABLE_FAILED_WRONG_CREDENTIALS {
            get {
                return ResourceManager.GetString("POOL_AUTH_DISABLE_FAILED_WRONG_CREDENTIALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not enable external authentication: {1}.
        /// </summary>
        public static string POOL_AUTH_ENABLE_FAILED {
            get {
                return ResourceManager.GetString("POOL_AUTH_ENABLE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server was unable to contact your domain server to enable external authentication. Check that your settings are correct and a route to the server exists..
        /// </summary>
        public static string POOL_AUTH_ENABLE_FAILED_DOMAIN_LOOKUP_FAILED {
            get {
                return ResourceManager.GetString("POOL_AUTH_ENABLE_FAILED_DOMAIN_LOOKUP_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to enable external authentication, a duplicate hostname was detected..
        /// </summary>
        public static string POOL_AUTH_ENABLE_FAILED_DUPLICATE_HOSTNAME {
            get {
                return ResourceManager.GetString("POOL_AUTH_ENABLE_FAILED_DUPLICATE_HOSTNAME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to enable external authentication, the supplied account was invalid..
        /// </summary>
        public static string POOL_AUTH_ENABLE_FAILED_INVALID_ACCOUNT {
            get {
                return ResourceManager.GetString("POOL_AUTH_ENABLE_FAILED_INVALID_ACCOUNT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pool failed to enable external authentication..
        /// </summary>
        public static string POOL_AUTH_ENABLE_FAILED_INVALID_OU {
            get {
                return ResourceManager.GetString("POOL_AUTH_ENABLE_FAILED_INVALID_OU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to enable external authentication, permission on the AD server was denied..
        /// </summary>
        public static string POOL_AUTH_ENABLE_FAILED_PERMISSION_DENIED {
            get {
                return ResourceManager.GetString("POOL_AUTH_ENABLE_FAILED_PERMISSION_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to enable external authentication, the AD server was unavailable..
        /// </summary>
        public static string POOL_AUTH_ENABLE_FAILED_UNAVAILABLE {
            get {
                return ResourceManager.GetString("POOL_AUTH_ENABLE_FAILED_UNAVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to enable external authentication, the supplied credentials were invalid..
        /// </summary>
        public static string POOL_AUTH_ENABLE_FAILED_WRONG_CREDENTIALS {
            get {
                return ResourceManager.GetString("POOL_AUTH_ENABLE_FAILED_WRONG_CREDENTIALS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The external authentication configuration of the server joining the pool must match the pool&apos;s own external authentication configuration..
        /// </summary>
        public static string POOL_JOINING_EXTERNAL_AUTH_MISMATCH {
            get {
                return ResourceManager.GetString("POOL_JOINING_EXTERNAL_AUTH_MISMATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host joining the pool must not have any bonds..
        /// </summary>
        public static string POOL_JOINING_HOST_HAS_BONDS {
            get {
                return ResourceManager.GetString("POOL_JOINING_HOST_HAS_BONDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host joining the pool must not have any non-management vlans..
        /// </summary>
        public static string POOL_JOINING_HOST_HAS_NON_MANAGEMENT_VLANS {
            get {
                return ResourceManager.GetString("POOL_JOINING_HOST_HAS_NON_MANAGEMENT_VLANS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host joining the pool must not have any tunnels..
        /// </summary>
        public static string POOL_JOINING_HOST_HAS_TUNNELS {
            get {
                return ResourceManager.GetString("POOL_JOINING_HOST_HAS_TUNNELS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host joining the pool must have the same management vlan..
        /// </summary>
        public static string POOL_JOINING_HOST_MANAGEMENT_VLAN_DOES_NOT_MATCH {
            get {
                return ResourceManager.GetString("POOL_JOINING_HOST_MANAGEMENT_VLAN_DOES_NOT_MATCH", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server joining the pool must have a physical management NIC (i.e. the management NIC must not be on a VLAN or bonded PIF)..
        /// </summary>
        public static string POOL_JOINING_HOST_MUST_HAVE_PHYSICAL_MANAGEMENT_NIC {
            get {
                return ResourceManager.GetString("POOL_JOINING_HOST_MUST_HAVE_PHYSICAL_MANAGEMENT_NIC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host joining the pool must have the same API version as the pool master..
        /// </summary>
        public static string POOL_JOINING_HOST_MUST_HAVE_SAME_API_VERSION {
            get {
                return ResourceManager.GetString("POOL_JOINING_HOST_MUST_HAVE_SAME_API_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host joining the pool must have the same database schema as the pool master..
        /// </summary>
        public static string POOL_JOINING_HOST_MUST_HAVE_SAME_DB_SCHEMA {
            get {
                return ResourceManager.GetString("POOL_JOINING_HOST_MUST_HAVE_SAME_DB_SCHEMA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server joining the pool must have the same product version as the pool master..
        /// </summary>
        public static string POOL_JOINING_HOST_MUST_HAVE_SAME_PRODUCT_VERSION {
            get {
                return ResourceManager.GetString("POOL_JOINING_HOST_MUST_HAVE_SAME_PRODUCT_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host joining the pool must not have any bonds, VLANs or tunnels..
        /// </summary>
        public static string POOL_JOINING_HOST_MUST_ONLY_HAVE_PHYSICAL_PIFS {
            get {
                return ResourceManager.GetString("POOL_JOINING_HOST_MUST_ONLY_HAVE_PHYSICAL_PIFS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provision call failed because it ran out of space..
        /// </summary>
        public static string PROVISION_FAILED_OUT_OF_SPACE {
            get {
                return ResourceManager.GetString("PROVISION_FAILED_OUT_OF_SPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provision call can only be invoked on templates, not regular VMs..
        /// </summary>
        public static string PROVISION_ONLY_ALLOWED_ON_TEMPLATE {
            get {
                return ResourceManager.GetString("PROVISION_ONLY_ALLOWED_ON_TEMPLATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VDI corresponding to this PUSB has existing VBDs..
        /// </summary>
        public static string PUSB_VDI_CONFLICT {
            get {
                return ResourceManager.GetString("PUSB_VDI_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PVS site already has cache storage configured for the host..
        /// </summary>
        public static string PVS_CACHE_STORAGE_ALREADY_PRESENT {
            get {
                return ResourceManager.GetString("PVS_CACHE_STORAGE_ALREADY_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PVS cache storage is in use by the site and cannot be removed..
        /// </summary>
        public static string PVS_CACHE_STORAGE_IS_IN_USE {
            get {
                return ResourceManager.GetString("PVS_CACHE_STORAGE_IS_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VIF is already associated with a PVS proxy.
        /// </summary>
        public static string PVS_PROXY_ALREADY_PRESENT {
            get {
                return ResourceManager.GetString("PVS_PROXY_ALREADY_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The address specified is already in use by an existing PVS_server object.
        /// </summary>
        public static string PVS_SERVER_ADDRESS_IN_USE {
            get {
                return ResourceManager.GetString("PVS_SERVER_ADDRESS_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PVS site contains running proxies..
        /// </summary>
        public static string PVS_SITE_CONTAINS_RUNNING_PROXIES {
            get {
                return ResourceManager.GetString("PVS_SITE_CONTAINS_RUNNING_PROXIES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The PVS site contains servers and cannot be forgotten..
        /// </summary>
        public static string PVS_SITE_CONTAINS_SERVERS {
            get {
                return ResourceManager.GetString("PVS_SITE_CONTAINS_SERVERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your current role is not authorized to perform this action.
        ///Action: {0}.
        /// </summary>
        public static string RBAC_PERMISSION_DENIED {
            get {
                return ResourceManager.GetString("RBAC_PERMISSION_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your current role is not authorized to perform this action.
        ///Current Role: {0}
        ///Authorized Roles: {1}.
        /// </summary>
        public static string RBAC_PERMISSION_DENIED_FRIENDLY {
            get {
                return ResourceManager.GetString("RBAC_PERMISSION_DENIED_FRIENDLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your current role is not authorized to perform this action on {2}.
        ///Current Role: {0}
        ///Authorized Roles: {1}.
        /// </summary>
        public static string RBAC_PERMISSION_DENIED_FRIENDLY_CONNECTION {
            get {
                return ResourceManager.GetString("RBAC_PERMISSION_DENIED_FRIENDLY_CONNECTION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not be performed because a redo log is enabled on the Pool..
        /// </summary>
        public static string REDO_LOG_IS_ENABLED {
            get {
                return ResourceManager.GetString("REDO_LOG_IS_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot restore on this server because it was saved on an incompatible version.
        /// </summary>
        public static string RESTORE_INCOMPATIBLE_VERSION {
            get {
                return ResourceManager.GetString("RESTORE_INCOMPATIBLE_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The restore could not be performed because the restore script failed. Your backup file may be corrupt. See the logs for more information..
        /// </summary>
        public static string RESTORE_SCRIPT_FAILED {
            get {
                return ResourceManager.GetString("RESTORE_SCRIPT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The restore could not be performed because the server&apos;s current management interface is not in the backup. The interfaces mentioned in the backup are:.
        /// </summary>
        public static string RESTORE_TARGET_MGMT_IF_NOT_IN_BACKUP {
            get {
                return ResourceManager.GetString("RESTORE_TARGET_MGMT_IF_NOT_IN_BACKUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The restore could not be performed because a network interface is missing.
        /// </summary>
        public static string RESTORE_TARGET_MISSING_DEVICE {
            get {
                return ResourceManager.GetString("RESTORE_TARGET_MISSING_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Role already exists..
        /// </summary>
        public static string ROLE_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("ROLE_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Role cannot be found..
        /// </summary>
        public static string ROLE_NOT_FOUND {
            get {
                return ResourceManager.GetString("ROLE_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not authenticate session. Check your access credentials and try again..
        /// </summary>
        public static string SESSION_AUTHENTICATION_FAILED {
            get {
                return ResourceManager.GetString("SESSION_AUTHENTICATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The connection to the server has been lost..
        /// </summary>
        public static string SESSION_INVALID {
            get {
                return ResourceManager.GetString("SESSION_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This session {0} is not registered to receive events.  You must call event.register before event.next.  The session handle you are using is echoed..
        /// </summary>
        public static string SESSION_NOT_REGISTERED {
            get {
                return ResourceManager.GetString("SESSION_NOT_REGISTERED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The management interface on a slave cannot be disabled because the slave would enter emergency mode..
        /// </summary>
        public static string SLAVE_REQUIRES_MANAGEMENT_INTERFACE {
            get {
                return ResourceManager.GetString("SLAVE_REQUIRES_MANAGEMENT_INTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SM plugin did not respond to a query..
        /// </summary>
        public static string SM_PLUGIN_COMMUNICATION_FAILURE {
            get {
                return ResourceManager.GetString("SM_PLUGIN_COMMUNICATION_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attaching this SR failed..
        /// </summary>
        public static string SR_ATTACH_FAILED {
            get {
                return ResourceManager.GetString("SR_ATTACH_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR failed to complete the operation.
        /// </summary>
        public static string SR_BACKEND_FAILURE {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid argument.
        /// </summary>
        public static string SR_BACKEND_FAILURE_1 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot find volume.
        /// </summary>
        public static string SR_BACKEND_FAILURE_100 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_100", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing the server path parameter.
        /// </summary>
        public static string SR_BACKEND_FAILURE_101 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_101", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing the server parameter.
        /// </summary>
        public static string SR_BACKEND_FAILURE_102 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_102", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server path argument is not valid.
        /// </summary>
        public static string SR_BACKEND_FAILURE_103 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_103", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to open the refcount file.
        /// </summary>
        public static string SR_BACKEND_FAILURE_104 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_104", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Root system device, cannot be used for VM storage.
        /// </summary>
        public static string SR_BACKEND_FAILURE_105 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_105", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IQN provided is an invalid format.
        /// </summary>
        public static string SR_BACKEND_FAILURE_106 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_106", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SCSIid parameter is missing or incorrect.
        /// </summary>
        public static string SR_BACKEND_FAILURE_107 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_107", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to detect an NFS service on this target..
        /// </summary>
        public static string SR_BACKEND_FAILURE_108 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_108", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The snapshot chain is too long.
        /// </summary>
        public static string SR_BACKEND_FAILURE_109 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_109", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VDI resize failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_110 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_110", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SMB mount error.
        /// </summary>
        public static string SR_BACKEND_FAILURE_111 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_111", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SMB unmount error.
        /// </summary>
        public static string SR_BACKEND_FAILURE_112 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_112", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SMB mount point already attached.
        /// </summary>
        public static string SR_BACKEND_FAILURE_113 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_113", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to remove SMB mount point.
        /// </summary>
        public static string SR_BACKEND_FAILURE_114 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_114", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not all required parameters specified..
        /// </summary>
        public static string SR_BACKEND_FAILURE_115 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_115", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to create SMB SR..
        /// </summary>
        public static string SR_BACKEND_FAILURE_116 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_116", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Netapp Target parameter missing in Dconf string.
        /// </summary>
        public static string SR_BACKEND_FAILURE_120 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_120", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SM has thrown a generic python exception.
        /// </summary>
        public static string SR_BACKEND_FAILURE_1200 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_1200", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Netapp Username parameter missing in Dconf string.
        /// </summary>
        public static string SR_BACKEND_FAILURE_121 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_121", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Netapp Password parameter missing in Dconf string.
        /// </summary>
        public static string SR_BACKEND_FAILURE_122 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_122", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Netapp Aggregate parameter missing in Dconf string.
        /// </summary>
        public static string SR_BACKEND_FAILURE_123 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_123", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to connect to Netapp target.
        /// </summary>
        public static string SR_BACKEND_FAILURE_124 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_124", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authentication credentials incorrect.
        /// </summary>
        public static string SR_BACKEND_FAILURE_125 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_125", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Auth credentials have insufficient access privileges.
        /// </summary>
        public static string SR_BACKEND_FAILURE_126 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_126", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Max number of flexvols reached on target. Unable to allocate requested resource..
        /// </summary>
        public static string SR_BACKEND_FAILURE_127 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_127", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Max number of Snapshots reached on target Volume. Unable to create snapshot..
        /// </summary>
        public static string SR_BACKEND_FAILURE_128 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_128", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Insufficient space, unable to create snapshot..
        /// </summary>
        public static string SR_BACKEND_FAILURE_129 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_129", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Netapp Target version unsupported.
        /// </summary>
        public static string SR_BACKEND_FAILURE_130 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_130", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to retrieve target IQN.
        /// </summary>
        public static string SR_BACKEND_FAILURE_131 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_131", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to iSCSI service not running on the Netapp target..
        /// </summary>
        public static string SR_BACKEND_FAILURE_132 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_132", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to enable A-SIS for the SR. Requires valid license on the filer..
        /// </summary>
        public static string SR_BACKEND_FAILURE_133 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_133", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The filer will not support A-SIS on this aggregate. The license is valid however on some filers A-SIS is limited to smaller aggregates, e.g. FAS3020 max supported aggregate is 1TB. See filer support documentation for details on your model. You must either disable A-SIS support, or re-configure your aggregate to the max supported size..
        /// </summary>
        public static string SR_BACKEND_FAILURE_134 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_134", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to acquire an exclusive lock on the LUN..
        /// </summary>
        public static string SR_BACKEND_FAILURE_135 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_135", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DNS lookup failed: the given servername could not be resolved..
        /// </summary>
        public static string SR_BACKEND_FAILURE_140 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_140", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to connect to iSCSI service on target.
        /// </summary>
        public static string SR_BACKEND_FAILURE_141 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_141", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrect value for iSCSI port, must be a number between 1 and 65535.
        /// </summary>
        public static string SR_BACKEND_FAILURE_142 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_142", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to parse the request.
        /// </summary>
        public static string SR_BACKEND_FAILURE_143 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_143", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VDI could not be found.
        /// </summary>
        public static string SR_BACKEND_FAILURE_144 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_144", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to initialize XMLRPC connection.
        /// </summary>
        public static string SR_BACKEND_FAILURE_150 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_150", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to query Local Control Domain.
        /// </summary>
        public static string SR_BACKEND_FAILURE_151 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_151", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Failure occurred querying the PBD entries.
        /// </summary>
        public static string SR_BACKEND_FAILURE_152 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_152", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A Failure occurred accessing an API object.
        /// </summary>
        public static string SR_BACKEND_FAILURE_153 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_153", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified storage repository is currently in use.
        /// </summary>
        public static string SR_BACKEND_FAILURE_16 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_16", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equallogic Target parameter missing in Dconf string.
        /// </summary>
        public static string SR_BACKEND_FAILURE_160 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_160", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equallogic Username parameter missing in Dconf string.
        /// </summary>
        public static string SR_BACKEND_FAILURE_161 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_161", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equallogic Password parameter missing in Dconf string.
        /// </summary>
        public static string SR_BACKEND_FAILURE_162 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_162", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equallogic StoragePool parameter missing in Dconf string.
        /// </summary>
        public static string SR_BACKEND_FAILURE_163 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_163", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to connect to Equallogic Array; maximum SSH CLI sessions reached.
        /// </summary>
        public static string SR_BACKEND_FAILURE_164 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_164", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid snap-reserver-percentage value, must be an integer indicating the amount of space, as a percentage of the VDI size, to reserve for snapshots..
        /// </summary>
        public static string SR_BACKEND_FAILURE_165 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_165", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid snap-depletion value, must be one of &apos;delete-oldest&apos; or &apos;volume-offline&apos;.
        /// </summary>
        public static string SR_BACKEND_FAILURE_166 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_166", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Volume out of space, probably due to insufficient snapshot reserve allocation..
        /// </summary>
        public static string SR_BACKEND_FAILURE_167 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_167", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot create Snapshot of a Snapshot VDI, operation unsupported.
        /// </summary>
        public static string SR_BACKEND_FAILURE_168 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_168", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to connect to Equallogic Array. Check your user name and password..
        /// </summary>
        public static string SR_BACKEND_FAILURE_169 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_169", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equallogic Target version unsupported.
        /// </summary>
        public static string SR_BACKEND_FAILURE_170 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_170", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to logon to Array. Check IP settings..
        /// </summary>
        public static string SR_BACKEND_FAILURE_171 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_171", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equallogic StoragePool parameter specified in Dconf string is Invalid.
        /// </summary>
        public static string SR_BACKEND_FAILURE_172 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_172", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Equallogic Target parameter specified in Dconf string is Invalid, please specify the correct Group IPaddress.
        /// </summary>
        public static string SR_BACKEND_FAILURE_173 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_173", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid SNMP response received for a CLI command.
        /// </summary>
        public static string SR_BACKEND_FAILURE_174 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_174", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Volume metadata stored in the &apos;Description&apos; field is invalid, this field contains encoded data and is not user editable.
        /// </summary>
        public static string SR_BACKEND_FAILURE_175 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_175", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid EOF response received for a CLI command.
        /// </summary>
        public static string SR_BACKEND_FAILURE_176 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_176", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Volume Group out of space. The SR is over-provisioned, and out of space. Unable to grow the underlying volume to accommodate the virtual size of the disk..
        /// </summary>
        public static string SR_BACKEND_FAILURE_180 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_180", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in Metadata volume operation for SR..
        /// </summary>
        public static string SR_BACKEND_FAILURE_181 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_181", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No such device.
        /// </summary>
        public static string SR_BACKEND_FAILURE_19 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_19", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A bad character was detected in the dconf string.
        /// </summary>
        public static string SR_BACKEND_FAILURE_2 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_2", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No such secret..
        /// </summary>
        public static string SR_BACKEND_FAILURE_20 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_20", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General IO error.
        /// </summary>
        public static string SR_BACKEND_FAILURE_200 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_200", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Currently unavailable, try again.
        /// </summary>
        public static string SR_BACKEND_FAILURE_201 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_201", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to General backend error.
        /// </summary>
        public static string SR_BACKEND_FAILURE_202 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_202", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An active FIST point was reached that causes the process to exit abnormally.
        /// </summary>
        public static string SR_BACKEND_FAILURE_203 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_203", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device configuration request is missing the Location parameter.
        /// </summary>
        public static string SR_BACKEND_FAILURE_220 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_220", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ISO name must have .iso extension.
        /// </summary>
        public static string SR_BACKEND_FAILURE_221 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_221", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to mount the directory specified in device configuration request.
        /// </summary>
        public static string SR_BACKEND_FAILURE_222 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_222", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to unmount the directory specified in device configuration request.
        /// </summary>
        public static string SR_BACKEND_FAILURE_223 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_223", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not locate the ISO sharename on the target, or the access permissions may be incorrect..
        /// </summary>
        public static string SR_BACKEND_FAILURE_224 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_224", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Incorrect Location string format. String must be in the format SERVER:PATH for NFS targets, or \\SERVER\PATH for CIFS targets.
        /// </summary>
        public static string SR_BACKEND_FAILURE_225 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_225", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid local path.
        /// </summary>
        public static string SR_BACKEND_FAILURE_226 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_226", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Given SMB version is not allowed. Choose either 1.0 or 3.0.
        /// </summary>
        public static string SR_BACKEND_FAILURE_227 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_227", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Require &quot;-o&quot; along with xe-mount-isosr.
        /// </summary>
        public static string SR_BACKEND_FAILURE_228 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_228", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VDI is currently in use.
        /// </summary>
        public static string SR_BACKEND_FAILURE_24 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_24", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request to lock/unlock the storage repository or VDI failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_37 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_37", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The method you have requested is not currently supported.
        /// </summary>
        public static string SR_BACKEND_FAILURE_38 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_38", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified storage repository contains data.
        /// </summary>
        public static string SR_BACKEND_FAILURE_39 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_39", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified  storage repository scan failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_40 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_40", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The target server name or IP address is missing.
        /// </summary>
        public static string SR_BACKEND_FAILURE_400 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_400", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Storage System ID is missing.
        /// </summary>
        public static string SR_BACKEND_FAILURE_401 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_401", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Storage Pool ID is missing.
        /// </summary>
        public static string SR_BACKEND_FAILURE_402 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_402", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The storage repository log operation failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_41 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_41", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The gssi operation to the CSLG server failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_410 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_410", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR loading operation failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_411 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_411", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid storage protocol was specified.
        /// </summary>
        public static string SR_BACKEND_FAILURE_412 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_412", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to parse XML.
        /// </summary>
        public static string SR_BACKEND_FAILURE_413 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_413", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to probe SR.
        /// </summary>
        public static string SR_BACKEND_FAILURE_414 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_414", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Snapshot/Clone failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_416 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_416", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Storage assignment failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_417 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_417", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Storage un-assignment failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_418 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_418", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Storage allocation failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_419 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_419", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified storage repository already exists.
        /// </summary>
        public static string SR_BACKEND_FAILURE_42 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_42", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Storage deallocation failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_420 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_420", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HBA Query failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_421 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_421", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IQN/iSCSI initialization failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_422 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_422", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SCSI device scan failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_423 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_423", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to connect to target: please check the hostname or IP address.
        /// </summary>
        public static string SR_BACKEND_FAILURE_424 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_424", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Storage Node ID is missing.
        /// </summary>
        public static string SR_BACKEND_FAILURE_425 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_425", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VDI failed to be introduced to the database.
        /// </summary>
        public static string SR_BACKEND_FAILURE_426 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_426", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The CSLG software doesn&apos;t seem to be installed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_427 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_427", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to create multiple sub-pools from parent pool.
        /// </summary>
        public static string SR_BACKEND_FAILURE_428 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_428", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Current XML definition is newer version.
        /// </summary>
        public static string SR_BACKEND_FAILURE_429 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_429", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VDI already exists.
        /// </summary>
        public static string SR_BACKEND_FAILURE_43 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_43", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to communicate with the multipath daemon.
        /// </summary>
        public static string SR_BACKEND_FAILURE_430 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_430", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error in storage adapter communication.
        /// </summary>
        public static string SR_BACKEND_FAILURE_431 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_431", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The adapter id is missing.
        /// </summary>
        public static string SR_BACKEND_FAILURE_432 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_432", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The user name is missing.
        /// </summary>
        public static string SR_BACKEND_FAILURE_433 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_433", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The password is missing.
        /// </summary>
        public static string SR_BACKEND_FAILURE_434 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_434", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An invalid storage system ID was specified.
        /// </summary>
        public static string SR_BACKEND_FAILURE_435 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_435", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to collect storage system information.
        /// </summary>
        public static string SR_BACKEND_FAILURE_436 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_436", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to collect storage pool information.
        /// </summary>
        public static string SR_BACKEND_FAILURE_437 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_437", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to delete storage pool.
        /// </summary>
        public static string SR_BACKEND_FAILURE_438 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_438", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to collect storage volume information.
        /// </summary>
        public static string SR_BACKEND_FAILURE_439 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_439", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified storage repository has insufficient space.
        /// </summary>
        public static string SR_BACKEND_FAILURE_44 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_44", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to list storage volume.
        /// </summary>
        public static string SR_BACKEND_FAILURE_440 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_440", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to resize storage volume.
        /// </summary>
        public static string SR_BACKEND_FAILURE_441 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_441", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to list storage target ports.
        /// </summary>
        public static string SR_BACKEND_FAILURE_442 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_442", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to list storage pool.
        /// </summary>
        public static string SR_BACKEND_FAILURE_443 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_443", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tapdisk failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_444 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_444", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tapdisk is already running.
        /// </summary>
        public static string SR_BACKEND_FAILURE_445 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_445", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Extended characters are not supported in SMB paths, user names, and passwords..
        /// </summary>
        public static string SR_BACKEND_FAILURE_446 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_446", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Illegal XML character..
        /// </summary>
        public static string SR_BACKEND_FAILURE_447 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_447", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unsupported kernel: neither 2.6 nor 3.x..
        /// </summary>
        public static string SR_BACKEND_FAILURE_448 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_448", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only 1 LUN may be used with shared OCFS.
        /// </summary>
        public static string SR_BACKEND_FAILURE_449 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_449", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OCFS mount error.
        /// </summary>
        public static string SR_BACKEND_FAILURE_450 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_450", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OCFS unmount error.
        /// </summary>
        public static string SR_BACKEND_FAILURE_451 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_451", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to OCFS filesystem creation error.
        /// </summary>
        public static string SR_BACKEND_FAILURE_452 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_452", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to tapdisk experienced an error.
        /// </summary>
        public static string SR_BACKEND_FAILURE_453 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_453", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SMB SR is not licensed on this host.
        /// </summary>
        public static string SR_BACKEND_FAILURE_454 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_454", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VG Registration failure.
        /// </summary>
        public static string SR_BACKEND_FAILURE_455 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_455", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to attach empty optical drive to VM..
        /// </summary>
        public static string SR_BACKEND_FAILURE_456 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_456", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to activate changed block tracking..
        /// </summary>
        public static string SR_BACKEND_FAILURE_457 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_457", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to deactivate changed block tracking..
        /// </summary>
        public static string SR_BACKEND_FAILURE_458 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_458", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Changed block tracking log is in an inconsistent state..
        /// </summary>
        public static string SR_BACKEND_FAILURE_459 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_459", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VDI is not available.
        /// </summary>
        public static string SR_BACKEND_FAILURE_46 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_46", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to calculate changed blocks for given VDIs..
        /// </summary>
        public static string SR_BACKEND_FAILURE_460 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_460", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The storage repository is not available.
        /// </summary>
        public static string SR_BACKEND_FAILURE_47 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_47", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The storage repository you are attempting to access is an unknown type.
        /// </summary>
        public static string SR_BACKEND_FAILURE_48 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_48", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The xml string is malformed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_49 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_49", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting to create the specified logical volume.
        /// </summary>
        public static string SR_BACKEND_FAILURE_50 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_50", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting to delete the specified logical volume.
        /// </summary>
        public static string SR_BACKEND_FAILURE_51 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_51", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logical Volume mount/activate error.
        /// </summary>
        public static string SR_BACKEND_FAILURE_52 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_52", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to umount/deactivate the specified logical volume failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_53 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_53", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting to write to the specified logical volume.
        /// </summary>
        public static string SR_BACKEND_FAILURE_54 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_54", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting to create a partition on the specified logical volume.
        /// </summary>
        public static string SR_BACKEND_FAILURE_55 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_55", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The partition on the logical volume is currently in use.
        /// </summary>
        public static string SR_BACKEND_FAILURE_56 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_56", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting to create the filesystem on the specified logical volume.
        /// </summary>
        public static string SR_BACKEND_FAILURE_57 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_57", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting to make a request from the logical volume. The request must come from the master..
        /// </summary>
        public static string SR_BACKEND_FAILURE_58 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_58", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to resize the logical volume failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_59 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_59", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size specified for the logical volume is invalid..
        /// </summary>
        public static string SR_BACKEND_FAILURE_60 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_60", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting create the file storage repository.
        /// </summary>
        public static string SR_BACKEND_FAILURE_61 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_61", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting to remove the directory on the file storage repository..
        /// </summary>
        public static string SR_BACKEND_FAILURE_62 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_62", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting to delete the file storage repository.
        /// </summary>
        public static string SR_BACKEND_FAILURE_63 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_63", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to remove the VDI failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_64 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_64", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to load the VDI failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_65 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_65", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VDI type is invalid.
        /// </summary>
        public static string SR_BACKEND_FAILURE_66 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_66", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to add the iSCSI device.
        /// </summary>
        public static string SR_BACKEND_FAILURE_67 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_67", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logging in to the iSCSI target failed. Check your user name and password..
        /// </summary>
        public static string SR_BACKEND_FAILURE_68 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_68", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Logging out of the iSCSI target failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_69 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_69", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to set the iSCSI initiator.
        /// </summary>
        public static string SR_BACKEND_FAILURE_70 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_70", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The iSCSI daemon failed to start.
        /// </summary>
        public static string SR_BACKEND_FAILURE_71 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_71", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NFS server version is unsupported.
        /// </summary>
        public static string SR_BACKEND_FAILURE_72 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_72", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting to mount the NFS share.
        /// </summary>
        public static string SR_BACKEND_FAILURE_73 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_73", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting to unmount the NFS share.
        /// </summary>
        public static string SR_BACKEND_FAILURE_74 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_74", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The NFS share has already been added.
        /// </summary>
        public static string SR_BACKEND_FAILURE_75 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_75", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to remove the NFS share failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_76 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_76", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to create a logical volume group failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_77 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_77", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to create a VDI failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_78 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_78", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The size specified for the VDI is invalid.
        /// </summary>
        public static string SR_BACKEND_FAILURE_79 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_79", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to mark the VDI as hidden failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_80 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_80", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to clone the VDI failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_81 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_81", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to snapshot the VDI failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_82 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_82", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to discover the iSCSI target/device failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_83 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_83", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The iScsi target and received IQNs do not match.
        /// </summary>
        public static string SR_BACKEND_FAILURE_84 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_84", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to detach the iSCSI failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_85 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_85", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The attempt to query the iSCSi daemon failed.
        /// </summary>
        public static string SR_BACKEND_FAILURE_86 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_86", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Either LUNid or LUNserial value must be provided.
        /// </summary>
        public static string SR_BACKEND_FAILURE_87 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_87", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was an error while attempting to create the NFS storage repository.
        /// </summary>
        public static string SR_BACKEND_FAILURE_88 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_88", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing the LUNid parameter.
        /// </summary>
        public static string SR_BACKEND_FAILURE_89 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_89", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing the device parameter.
        /// </summary>
        public static string SR_BACKEND_FAILURE_90 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_90", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The device is not a valid path.
        /// </summary>
        public static string SR_BACKEND_FAILURE_91 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_91", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The volume cannot be found.
        /// </summary>
        public static string SR_BACKEND_FAILURE_92 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_92", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The pvs utility returns an error.
        /// </summary>
        public static string SR_BACKEND_FAILURE_93 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_93", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing the location parameter.
        /// </summary>
        public static string SR_BACKEND_FAILURE_94 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_94", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing the target parameter.
        /// </summary>
        public static string SR_BACKEND_FAILURE_95 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_95", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing the target IQN parameter.
        /// </summary>
        public static string SR_BACKEND_FAILURE_96 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_96", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing the server configuration iSCSI IQN parameter.
        /// </summary>
        public static string SR_BACKEND_FAILURE_97 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_97", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request is missing the LUN serial number.
        /// </summary>
        public static string SR_BACKEND_FAILURE_98 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_98", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only 1 LUN may be used with shared LVM.
        /// </summary>
        public static string SR_BACKEND_FAILURE_99 {
            get {
                return ResourceManager.GetString("SR_BACKEND_FAILURE_99", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR operation cannot be performed because a device underlying the SR is in use by the server..
        /// </summary>
        public static string SR_DEVICE_IN_USE {
            get {
                return ResourceManager.GetString("SR_DEVICE_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted to migrate a VDI to or from an SR that doesn&apos;t support migration.
        /// </summary>
        public static string SR_DOES_NOT_SUPPORT_MIGRATION {
            get {
                return ResourceManager.GetString("SR_DOES_NOT_SUPPORT_MIGRATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR is full. Requested size {0} exceeds the maximum size {1}.
        /// </summary>
        public static string SR_FULL {
            get {
                return ResourceManager.GetString("SR_FULL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR.shared flag cannot be set to false while the SR remains connected to multiple servers.
        /// </summary>
        public static string SR_HAS_MULTIPLE_PBDS {
            get {
                return ResourceManager.GetString("SR_HAS_MULTIPLE_PBDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR has no attached PBDs.
        /// </summary>
        public static string SR_HAS_NO_PBDS {
            get {
                return ResourceManager.GetString("SR_HAS_NO_PBDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR {0} is still connected to a server by a PBD. It cannot be destroyed..
        /// </summary>
        public static string SR_HAS_PBD {
            get {
                return ResourceManager.GetString("SR_HAS_PBD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR could not be destroyed because the &apos;indestructible&apos; flag was set on it..
        /// </summary>
        public static string SR_INDESTRUCTIBLE {
            get {
                return ResourceManager.GetString("SR_INDESTRUCTIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR is currently being used as a local cache SR..
        /// </summary>
        public static string SR_IS_CACHE_SR {
            get {
                return ResourceManager.GetString("SR_IS_CACHE_SR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR is not attached..
        /// </summary>
        public static string SR_NOT_ATTACHED {
            get {
                return ResourceManager.GetString("SR_NOT_ATTACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR operation cannot be performed because the SR is not empty..
        /// </summary>
        public static string SR_NOT_EMPTY {
            get {
                return ResourceManager.GetString("SR_NOT_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SR is not sharable.
        /// </summary>
        public static string SR_NOT_SHARABLE {
            get {
                return ResourceManager.GetString("SR_NOT_SHARABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This SR does not support this operation.
        /// </summary>
        public static string SR_OPERATION_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("SR_OPERATION_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed until the SR has been upgraded.
        /// </summary>
        public static string SR_REQUIRES_UPGRADE {
            get {
                return ResourceManager.GetString("SR_REQUIRES_UPGRADE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The SR could not be connected because the driver {0} was not recognized..
        /// </summary>
        public static string SR_UNKNOWN_DRIVER {
            get {
                return ResourceManager.GetString("SR_UNKNOWN_DRIVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An SR with that uuid already exists..
        /// </summary>
        public static string SR_UUID_EXISTS {
            get {
                return ResourceManager.GetString("SR_UUID_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation could not proceed because necessary VDIs were already locked at the storage level..
        /// </summary>
        public static string SR_VDI_LOCKING_FAILED {
            get {
                return ResourceManager.GetString("SR_VDI_LOCKING_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The remote system&apos;s SSL certificate failed to verify against our certificate library..
        /// </summary>
        public static string SSL_VERIFY_ERROR {
            get {
                return ResourceManager.GetString("SSL_VERIFY_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subject already exists..
        /// </summary>
        public static string SUBJECT_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("SUBJECT_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Subject cannot be resolved by the external directory service..
        /// </summary>
        public static string SUBJECT_CANNOT_BE_RESOLVED {
            get {
                return ResourceManager.GetString("SUBJECT_CANNOT_BE_RESOLVED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The suspend image of a checkpoint is not accessible from the host on which the VM is running.
        /// </summary>
        public static string SUSPEND_IMAGE_NOT_ACCESSIBLE {
            get {
                return ResourceManager.GetString("SUSPEND_IMAGE_NOT_ACCESSIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must use tar output to retrieve system status from an OEM server..
        /// </summary>
        public static string SYSTEM_STATUS_MUST_USE_TAR_ON_OEM {
            get {
                return ResourceManager.GetString("SYSTEM_STATUS_MUST_USE_TAR_ON_OEM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Retrieving system status from the server failed..
        /// </summary>
        public static string SYSTEM_STATUS_RETRIEVAL_FAILED {
            get {
                return ResourceManager.GetString("SYSTEM_STATUS_RETRIEVAL_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request was asynchronously cancelled..
        /// </summary>
        public static string TASK_CANCELLED {
            get {
                return ResourceManager.GetString("TASK_CANCELLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot contact the other host using TLS on the specified address and port.
        /// </summary>
        public static string TLS_CONNECTION_FAILED {
            get {
                return ResourceManager.GetString("TLS_CONNECTION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request was rejected because the server is too busy..
        /// </summary>
        public static string TOO_BUSY {
            get {
                return ResourceManager.GetString("TOO_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The request was rejected because there are too many pending tasks on the server..
        /// </summary>
        public static string TOO_MANY_PENDING_TASKS {
            get {
                return ResourceManager.GetString("TOO_MANY_PENDING_TASKS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You reached the maximal number of concurrently migrating VMs..
        /// </summary>
        public static string TOO_MANY_STORAGE_MIGRATES {
            get {
                return ResourceManager.GetString("TOO_MANY_STORAGE_MIGRATES", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM has too many VUSBs..
        /// </summary>
        public static string TOO_MANY_VUSBS {
            get {
                return ResourceManager.GetString("TOO_MANY_VUSBS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The tunnel transport PIF has no IP configuration set..
        /// </summary>
        public static string TRANSPORT_PIF_NOT_CONFIGURED {
            get {
                return ResourceManager.GetString("TRANSPORT_PIF_NOT_CONFIGURED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have attempted a function which is not implemented.
        /// </summary>
        public static string UNIMPLEMENTED_IN_SM_BACKEND {
            get {
                return ResourceManager.GetString("UNIMPLEMENTED_IN_SM_BACKEND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested bootloader {1} for VM {0} is unknown.
        /// </summary>
        public static string UNKNOWN_BOOTLOADER {
            get {
                return ResourceManager.GetString("UNKNOWN_BOOTLOADER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This update has already been applied..
        /// </summary>
        public static string UPDATE_ALREADY_APPLIED {
            get {
                return ResourceManager.GetString("UPDATE_ALREADY_APPLIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This update has already been applied to all hosts in the pool..
        /// </summary>
        public static string UPDATE_ALREADY_APPLIED_IN_POOL {
            get {
                return ResourceManager.GetString("UPDATE_ALREADY_APPLIED_IN_POOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The uploaded update already exists.
        /// </summary>
        public static string UPDATE_ALREADY_EXISTS {
            get {
                return ResourceManager.GetString("UPDATE_ALREADY_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update failed to apply. View logs for more details..
        /// </summary>
        public static string UPDATE_APPLY_FAILED {
            get {
                return ResourceManager.GetString("UPDATE_APPLY_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified update has been applied and cannot be destroyed..
        /// </summary>
        public static string UPDATE_IS_APPLIED {
            get {
                return ResourceManager.GetString("UPDATE_IS_APPLIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update cannot be applied for the following host(s)..
        /// </summary>
        public static string UPDATE_POOL_APPLY_FAILED {
            get {
                return ResourceManager.GetString("UPDATE_POOL_APPLY_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update precheck stage failed: conflicting update(s) are present..
        /// </summary>
        public static string UPDATE_PRECHECK_FAILED_CONFLICT_PRESENT {
            get {
                return ResourceManager.GetString("UPDATE_PRECHECK_FAILED_CONFLICT_PRESENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update precheck stage failed: RPM package validation requires a GPG key that is not present on the host..
        /// </summary>
        public static string UPDATE_PRECHECK_FAILED_GPGKEY_NOT_IMPORTED {
            get {
                return ResourceManager.GetString("UPDATE_PRECHECK_FAILED_GPGKEY_NOT_IMPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update precheck stage failed: the server does not have enough space..
        /// </summary>
        public static string UPDATE_PRECHECK_FAILED_OUT_OF_SPACE {
            get {
                return ResourceManager.GetString("UPDATE_PRECHECK_FAILED_OUT_OF_SPACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update precheck stage failed: prerequisite update(s) are missing..
        /// </summary>
        public static string UPDATE_PRECHECK_FAILED_PREREQUISITE_MISSING {
            get {
                return ResourceManager.GetString("UPDATE_PRECHECK_FAILED_PREREQUISITE_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update precheck stage failed with an unknown error..
        /// </summary>
        public static string UPDATE_PRECHECK_FAILED_UNKNOWN_ERROR {
            get {
                return ResourceManager.GetString("UPDATE_PRECHECK_FAILED_UNKNOWN_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The update precheck stage failed: the server is of an incorrect version..
        /// </summary>
        public static string UPDATE_PRECHECK_FAILED_WRONG_SERVER_VERSION {
            get {
                return ResourceManager.GetString("UPDATE_PRECHECK_FAILED_WRONG_SERVER_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The USB device is currently attached to a VM..
        /// </summary>
        public static string USB_ALREADY_ATTACHED {
            get {
                return ResourceManager.GetString("USB_ALREADY_ATTACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to USB_groups are currently restricted to contain no more than one VUSB..
        /// </summary>
        public static string USB_GROUP_CONFLICT {
            get {
                return ResourceManager.GetString("USB_GROUP_CONFLICT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The USB group does not contain any PUSBs..
        /// </summary>
        public static string USB_GROUP_CONTAINS_NO_PUSBS {
            get {
                return ResourceManager.GetString("USB_GROUP_CONTAINS_NO_PUSBS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The USB group contains active PUSBs and cannot be deleted..
        /// </summary>
        public static string USB_GROUP_CONTAINS_PUSB {
            get {
                return ResourceManager.GetString("USB_GROUP_CONTAINS_PUSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The USB group contains active VUSBs and cannot be deleted..
        /// </summary>
        public static string USB_GROUP_CONTAINS_VUSB {
            get {
                return ResourceManager.GetString("USB_GROUP_CONTAINS_VUSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only the local superuser can perform this operation.
        /// </summary>
        public static string USER_IS_NOT_LOCAL_SUPERUSER {
            get {
                return ResourceManager.GetString("USER_IS_NOT_LOCAL_SUPERUSER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The uuid you supplied was invalid..
        /// </summary>
        public static string UUID_INVALID {
            get {
                return ResourceManager.GetString("UUID_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a problem with the license daemon (v6d)..
        /// </summary>
        public static string V6D_FAILURE {
            get {
                return ResourceManager.GetString("V6D_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted to set value {1} for field {0} that is not supported. {2}.
        /// </summary>
        public static string VALUE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("VALUE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Read/write CDs are not supported.
        /// </summary>
        public static string VBD_CDS_MUST_BE_READONLY {
            get {
                return ResourceManager.GetString("VBD_CDS_MUST_BE_READONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VBD {0} - Operation could not be performed because the drive is empty.
        /// </summary>
        public static string VBD_IS_EMPTY {
            get {
                return ResourceManager.GetString("VBD_IS_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VBD {0} - Operation could not be performed because the drive is not empty.
        /// </summary>
        public static string VBD_NOT_EMPTY {
            get {
                return ResourceManager.GetString("VBD_NOT_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VBD {0} - Media could not be ejected because it is not removable.
        /// </summary>
        public static string VBD_NOT_REMOVABLE_MEDIA {
            get {
                return ResourceManager.GetString("VBD_NOT_REMOVABLE_MEDIA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Drive could not be hot-unplugged because it is not marked as unpluggable.
        /// </summary>
        public static string VBD_NOT_UNPLUGGABLE {
            get {
                return ResourceManager.GetString("VBD_NOT_UNPLUGGABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This VM has locked the DVD drive tray, so the disk cannot be ejected.
        /// </summary>
        public static string VBD_TRAY_LOCKED {
            get {
                return ResourceManager.GetString("VBD_TRAY_LOCKED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have reached the maximum number of virtual disks allowed for this virtual machine..
        /// </summary>
        public static string VBDS_MAX_ALLOWED {
            get {
                return ResourceManager.GetString("VBDS_MAX_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum number of virtual disks allowed.
        /// </summary>
        public static string VBDS_MAX_ALLOWED_TITLE {
            get {
                return ResourceManager.GetString("VBDS_MAX_ALLOWED_TITLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have reached the maximum number of virtual CPUs allowed for this virtual machine..
        /// </summary>
        public static string VCPUS_MAX_ALLOWED {
            get {
                return ResourceManager.GetString("VCPUS_MAX_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum number of virtual CPUs allowed.
        /// </summary>
        public static string VCPUS_MAX_ALLOWED_TITLE {
            get {
                return ResourceManager.GetString("VCPUS_MAX_ALLOWED_TITLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is not allowed for VDIs with CBT enabled or VMs having such VDIs, and CBT is enabled for the specified VDI..
        /// </summary>
        public static string VDI_CBT_ENABLED {
            get {
                return ResourceManager.GetString("VDI_CBT_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VDI could not be opened for metadata recovery as it contains the current pool&apos;s metadata..
        /// </summary>
        public static string VDI_CONTAINS_METADATA_OF_THIS_POOL {
            get {
                return ResourceManager.GetString("VDI_CONTAINS_METADATA_OF_THIS_POOL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VDI copy action has failed.
        /// </summary>
        public static string VDI_COPY_FAILED {
            get {
                return ResourceManager.GetString("VDI_COPY_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed because this VDI has rrd stats.
        /// </summary>
        public static string VDI_HAS_RRDS {
            get {
                return ResourceManager.GetString("VDI_HAS_RRDS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed because a VDI is in use by some other operation..
        /// </summary>
        public static string VDI_IN_USE {
            get {
                return ResourceManager.GetString("VDI_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed because the specified virtual disk is of an incompatible type (e.g., an HA statefile cannot be attached to a VM).
        /// </summary>
        public static string VDI_INCOMPATIBLE_TYPE {
            get {
                return ResourceManager.GetString("VDI_INCOMPATIBLE_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation cannot be performed on physical device.
        /// </summary>
        public static string VDI_IS_A_PHYSICAL_DEVICE {
            get {
                return ResourceManager.GetString("VDI_IS_A_PHYSICAL_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation can only be performed on CD VDIs (iso files or CDROM drives).  VDI {0} is of type {1}..
        /// </summary>
        public static string VDI_IS_NOT_ISO {
            get {
                return ResourceManager.GetString("VDI_IS_NOT_ISO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed because the specified virtual disk could not be found in the specified SR.
        /// </summary>
        public static string VDI_LOCATION_MISSING {
            get {
                return ResourceManager.GetString("VDI_LOCATION_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed because the specified virtual disk could not be found.
        /// </summary>
        public static string VDI_MISSING {
            get {
                return ResourceManager.GetString("VDI_MISSING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted to migrate a VDI which is not attached to a running VM..
        /// </summary>
        public static string VDI_NEEDS_VM_FOR_MIGRATE {
            get {
                return ResourceManager.GetString("VDI_NEEDS_VM_FOR_MIGRATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested operation is not allowed because the specified VDI does not have changed block tracking metadata..
        /// </summary>
        public static string VDI_NO_CBT_METADATA {
            get {
                return ResourceManager.GetString("VDI_NO_CBT_METADATA", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed because VDI {0} could not be properly attached to the VM..
        /// </summary>
        public static string VDI_NOT_AVAILABLE {
            get {
                return ResourceManager.GetString("VDI_NOT_AVAILABLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This VDI was not mapped to a destination SR in VM.migrate_send operation.
        /// </summary>
        public static string VDI_NOT_IN_MAP {
            get {
                return ResourceManager.GetString("VDI_NOT_IN_MAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed because the system does not manage this VDI.
        /// </summary>
        public static string VDI_NOT_MANAGED {
            get {
                return ResourceManager.GetString("VDI_NOT_MANAGED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VDI is not stored using a sparse format. It is not possible to query and manipulate only the changed blocks (or &apos;block differences&apos; or &apos;disk deltas&apos;) between two VDIs. Please select a VDI which uses a sparse-aware technology such as VHD..
        /// </summary>
        public static string VDI_NOT_SPARSE {
            get {
                return ResourceManager.GetString("VDI_NOT_SPARSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is not permitted on VDIs in the &apos;on-boot=reset&apos; mode, or on VMs having such VDIs..
        /// </summary>
        public static string VDI_ON_BOOT_MODE_INCOMPATIBLE_WITH_OPERATION {
            get {
                return ResourceManager.GetString("VDI_ON_BOOT_MODE_INCOMPATIBLE_WITH_OPERATION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation required write access but VDI {0} is read-only.
        /// </summary>
        public static string VDI_READONLY {
            get {
                return ResourceManager.GetString("VDI_READONLY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VDI is too small. Please resize it to at least the minimum size..
        /// </summary>
        public static string VDI_TOO_SMALL {
            get {
                return ResourceManager.GetString("VDI_TOO_SMALL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VGPU is not compatible with any PGPU in the destination..
        /// </summary>
        public static string VGPU_DESTINATION_INCOMPATIBLE {
            get {
                return ResourceManager.GetString("VGPU_DESTINATION_INCOMPATIBLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM cannot start because all GPUs are fully used or are running other types of virtual GPU.
        /// </summary>
        public static string VGPU_TYPE_NOT_COMPATIBLE_WITH_RUNNING_TYPE {
            get {
                return ResourceManager.GetString("VGPU_TYPE_NOT_COMPATIBLE_WITH_RUNNING_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Virtual GPU type is not one of the GPU&apos;s enabled types..
        /// </summary>
        public static string VGPU_TYPE_NOT_ENABLED {
            get {
                return ResourceManager.GetString("VGPU_TYPE_NOT_ENABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Virtual GPU type is not one of the GPU&apos;s supported types..
        /// </summary>
        public static string VGPU_TYPE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("VGPU_TYPE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Network has active VIFs.
        /// </summary>
        public static string VIF_IN_USE {
            get {
                return ResourceManager.GetString("VIF_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This VIF was not mapped to a destination network.
        /// </summary>
        public static string VIF_NOT_IN_MAP {
            get {
                return ResourceManager.GetString("VIF_NOT_IN_MAP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You have reached the maximum number of virtual network interfaces allowed for this virtual machine..
        /// </summary>
        public static string VIFS_MAX_ALLOWED {
            get {
                return ResourceManager.GetString("VIFS_MAX_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Maximum number of virtual network interfaces allowed.
        /// </summary>
        public static string VIFS_MAX_ALLOWED_TITLE {
            get {
                return ResourceManager.GetString("VIFS_MAX_ALLOWED_TITLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Operation cannot be performed because this VLAN is already in use. Please check your network configuration..
        /// </summary>
        public static string VLAN_IN_USE {
            get {
                return ResourceManager.GetString("VLAN_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You tried to create a VLAN, but the tag you gave ({0}) was invalid -- it must be between 0 and 4094..
        /// </summary>
        public static string VLAN_TAG_INVALID {
            get {
                return ResourceManager.GetString("VLAN_TAG_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This VM is assigned to a protection policy..
        /// </summary>
        public static string VM_ASSIGNED_TO_PROTECTION_POLICY {
            get {
                return ResourceManager.GetString("VM_ASSIGNED_TO_PROTECTION_POLICY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This VM is assigned to a snapshot schedule..
        /// </summary>
        public static string VM_ASSIGNED_TO_SNAPSHOT_SCHEDULE {
            get {
                return ResourceManager.GetString("VM_ASSIGNED_TO_SNAPSHOT_SCHEDULE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted to start a VM that&apos;s attached to more than one VDI with a timeoffset marked as reset-on-boot..
        /// </summary>
        public static string VM_ATTACHED_TO_MORE_THAN_ONE_VDI_WITH_TIMEOFFSET_MARKED_AS_RESET_ON_BOOT {
            get {
                return ResourceManager.GetString("VM_ATTACHED_TO_MORE_THAN_ONE_VDI_WITH_TIMEOFFSET_MARKED_AS_RESET_ON_BOOT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation on a VM that needed it to be in state &apos;{1}&apos; but was in state &apos;{2}&apos;..
        /// </summary>
        public static string VM_BAD_POWER_STATE {
            get {
                return ResourceManager.GetString("VM_BAD_POWER_STATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The BIOS strings for this VM have already been set and cannot be changed..
        /// </summary>
        public static string VM_BIOS_STRINGS_ALREADY_SET {
            get {
                return ResourceManager.GetString("VM_BIOS_STRINGS_ALREADY_SET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is a minimal interval required between consecutive plugin calls made on the same VM, please wait before retry..
        /// </summary>
        public static string VM_CALL_PLUGIN_RATE_LIMIT {
            get {
                return ResourceManager.GetString("VM_CALL_PLUGIN_RATE_LIMIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You cannot delete the specified default template..
        /// </summary>
        public static string VM_CANNOT_DELETE_DEFAULT_TEMPLATE {
            get {
                return ResourceManager.GetString("VM_CANNOT_DELETE_DEFAULT_TEMPLATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while restoring the memory image of the specified virtual machine.
        /// </summary>
        public static string VM_CHECKPOINT_RESUME_FAILED {
            get {
                return ResourceManager.GetString("VM_CHECKPOINT_RESUME_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while saving the memory image of the specified virtual machine.
        /// </summary>
        public static string VM_CHECKPOINT_SUSPEND_FAILED {
            get {
                return ResourceManager.GetString("VM_CHECKPOINT_SUSPEND_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM crashed.
        /// </summary>
        public static string VM_CRASHED {
            get {
                return ResourceManager.GetString("VM_CRASHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VM has a duplicate VBD device and cannot be started..
        /// </summary>
        public static string VM_DUPLICATE_VBD_DEVICE {
            get {
                return ResourceManager.GetString("VM_DUPLICATE_VBD_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VM didn&apos;t acknowledge the need to shut down..
        /// </summary>
        public static string VM_FAILED_SHUTDOWN_ACKNOWLEDGMENT {
            get {
                return ResourceManager.GetString("VM_FAILED_SHUTDOWN_ACKNOWLEDGMENT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM unexpectedly halted.
        /// </summary>
        public static string VM_HALTED {
            get {
                return ResourceManager.GetString("VM_HALTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted to migrate a VM which has a checkpoint..
        /// </summary>
        public static string VM_HAS_CHECKPOINT {
            get {
                return ResourceManager.GetString("VM_HAS_CHECKPOINT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VM cannot be resumed because it has no suspend VDI.
        /// </summary>
        public static string VM_HAS_NO_SUSPEND_VDI {
            get {
                return ResourceManager.GetString("VM_HAS_NO_SUSPEND_VDI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation could not be performed because the VM has one or more PCI devices passed through..
        /// </summary>
        public static string VM_HAS_PCI_ATTACHED {
            get {
                return ResourceManager.GetString("VM_HAS_PCI_ATTACHED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted to migrate a VM with more than one snapshot..
        /// </summary>
        public static string VM_HAS_TOO_MANY_SNAPSHOTS {
            get {
                return ResourceManager.GetString("VM_HAS_TOO_MANY_SNAPSHOTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation could not be performed, because the VM has one or more virtual GPUs..
        /// </summary>
        public static string VM_HAS_VGPU {
            get {
                return ResourceManager.GetString("VM_HAS_VGPU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is not allowed when the VM has VUSBs..
        /// </summary>
        public static string VM_HAS_VUSBS {
            get {
                return ResourceManager.GetString("VM_HAS_VUSBS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This VM operation cannot be performed on an older-versioned host during an upgrade..
        /// </summary>
        public static string VM_HOST_INCOMPATIBLE_VERSION {
            get {
                return ResourceManager.GetString("VM_HOST_INCOMPATIBLE_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted to migrate a VM to a destination host which is older than the source host..
        /// </summary>
        public static string VM_HOST_INCOMPATIBLE_VERSION_MIGRATE {
            get {
                return ResourceManager.GetString("VM_HOST_INCOMPATIBLE_VERSION_MIGRATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM&apos;s Virtual Hardware Platform version is incompatible with this host..
        /// </summary>
        public static string VM_HOST_INCOMPATIBLE_VIRTUAL_HARDWARE_PLATFORM_VERSION {
            get {
                return ResourceManager.GetString("VM_HOST_INCOMPATIBLE_VIRTUAL_HARDWARE_PLATFORM_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HVM is required for this operation.
        /// </summary>
        public static string VM_HVM_REQUIRED {
            get {
                return ResourceManager.GetString("VM_HVM_REQUIRED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to HVM not supported.
        /// </summary>
        public static string VM_HVM_REQUIRED_SHORT {
            get {
                return ResourceManager.GetString("VM_HVM_REQUIRED-SHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The host does not have some of the CPU features that the VM is currently using.
        /// </summary>
        public static string VM_INCOMPATIBLE_WITH_THIS_HOST {
            get {
                return ResourceManager.GetString("VM_INCOMPATIBLE_WITH_THIS_HOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM is configured in a way that prevents it from being mobile..
        /// </summary>
        public static string VM_IS_IMMOBILE {
            get {
                return ResourceManager.GetString("VM_IS_IMMOBILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM cannot be recovered on its own as it is part of a VM appliance..
        /// </summary>
        public static string VM_IS_PART_OF_AN_APPLIANCE {
            get {
                return ResourceManager.GetString("VM_IS_PART_OF_AN_APPLIANCE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed because the specified VM is protected by HA.
        /// </summary>
        public static string VM_IS_PROTECTED {
            get {
                return ResourceManager.GetString("VM_IS_PROTECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation attempted is not valid for templates.
        /// </summary>
        public static string VM_IS_TEMPLATE {
            get {
                return ResourceManager.GetString("VM_IS_TEMPLATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation is illegal because the VM is using nested virtualisation..
        /// </summary>
        public static string VM_IS_USING_NESTED_VIRT {
            get {
                return ResourceManager.GetString("VM_IS_USING_NESTED_VIRT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation on a VM which lacks the feature..
        /// </summary>
        public static string VM_LACKS_FEATURE {
            get {
                return ResourceManager.GetString("VM_LACKS_FEATURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation which needs the cooperative shutdown feature on a VM which lacks it..
        /// </summary>
        public static string VM_LACKS_FEATURE_SHUTDOWN {
            get {
                return ResourceManager.GetString("VM_LACKS_FEATURE_SHUTDOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation which needs the VM static-ip-setting feature on a VM which lacks it..
        /// </summary>
        public static string VM_LACKS_FEATURE_STATIC_IP_SETTING {
            get {
                return ResourceManager.GetString("VM_LACKS_FEATURE_STATIC_IP_SETTING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation which needs the VM cooperative suspend feature on a VM which lacks it..
        /// </summary>
        public static string VM_LACKS_FEATURE_SUSPEND {
            get {
                return ResourceManager.GetString("VM_LACKS_FEATURE_SUSPEND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation which needs the VM hotplug-vcpu feature on a VM which lacks it..
        /// </summary>
        public static string VM_LACKS_FEATURE_VCPU_HOTPLUG {
            get {
                return ResourceManager.GetString("VM_LACKS_FEATURE_VCPU_HOTPLUG", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VM has too little memory to be started..
        /// </summary>
        public static string VM_MEMORY_SIZE_TOO_LOW {
            get {
                return ResourceManager.GetString("VM_MEMORY_SIZE_TOO_LOW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VM migration failed: {3}.
        /// </summary>
        public static string VM_MIGRATE_FAILED {
            get {
                return ResourceManager.GetString("VM_MIGRATE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation on a VM which requires PV drivers to be installed but the drivers were not detected..
        /// </summary>
        public static string VM_MISSING_PV_DRIVERS {
            get {
                return ResourceManager.GetString("VM_MISSING_PV_DRIVERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This VM does not have a crashdump SR specified..
        /// </summary>
        public static string VM_NO_CRASHDUMP_SR {
            get {
                return ResourceManager.GetString("VM_NO_CRASHDUMP_SR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM has no empty CD drive (VBD)..
        /// </summary>
        public static string VM_NO_EMPTY_CD_VBD {
            get {
                return ResourceManager.GetString("VM_NO_EMPTY_CD_VBD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This VM does not have a suspend SR specified..
        /// </summary>
        public static string VM_NO_SUSPEND_SR {
            get {
                return ResourceManager.GetString("VM_NO_SUSPEND_SR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You need at least 1 VCPU to start a VM.
        /// </summary>
        public static string VM_NO_VCPUS {
            get {
                return ResourceManager.GetString("VM_NO_VCPUS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified VM is not currently resident on the specified server..
        /// </summary>
        public static string VM_NOT_RESIDENT_HERE {
            get {
                return ResourceManager.GetString("VM_NOT_RESIDENT_HERE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation on a VM which requires a more recent version of the PV drivers. Please upgrade your PV drivers..
        /// </summary>
        public static string VM_OLD_PV_DRIVERS {
            get {
                return ResourceManager.GetString("VM_OLD_PV_DRIVERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VM PV drivers still in use.
        /// </summary>
        public static string VM_PV_DRIVERS_IN_USE {
            get {
                return ResourceManager.GetString("VM_PV_DRIVERS_IN_USE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM unexpectedly rebooted.
        /// </summary>
        public static string VM_REBOOTED {
            get {
                return ResourceManager.GetString("VM_REBOOTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted to run a VM on a host which doesn&apos;t have a GPU available in the GPU group needed by the VM. The VM has a virtual GPU attached to this GPU group..
        /// </summary>
        public static string VM_REQUIRES_GPU {
            get {
                return ResourceManager.GetString("VM_REQUIRES_GPU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to GPU not available.
        /// </summary>
        public static string VM_REQUIRES_GPU_SHORT {
            get {
                return ResourceManager.GetString("VM_REQUIRES_GPU-SHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted to run a VM on a host which doesn&apos;t have I/O virtualization (IOMMU/VT-d) enabled, which is needed by the VM..
        /// </summary>
        public static string VM_REQUIRES_IOMMU {
            get {
                return ResourceManager.GetString("VM_REQUIRES_IOMMU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This VM needs a network that cannot be seen from that server.
        /// </summary>
        public static string VM_REQUIRES_NETWORK {
            get {
                return ResourceManager.GetString("VM_REQUIRES_NETWORK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot see required network.
        /// </summary>
        public static string VM_REQUIRES_NETWORK_SHORT {
            get {
                return ResourceManager.GetString("VM_REQUIRES_NETWORK-SHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This VM needs storage that cannot be seen from that server.
        /// </summary>
        public static string VM_REQUIRES_SR {
            get {
                return ResourceManager.GetString("VM_REQUIRES_SR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot see required storage.
        /// </summary>
        public static string VM_REQUIRES_SR_SHORT {
            get {
                return ResourceManager.GetString("VM_REQUIRES_SR-SHORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to VM cannot be started because it requires a VDI which cannot be attached.
        /// </summary>
        public static string VM_REQUIRES_VDI {
            get {
                return ResourceManager.GetString("VM_REQUIRES_VDI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM cannot start because no GPU is available.
        /// </summary>
        public static string VM_REQUIRES_VGPU {
            get {
                return ResourceManager.GetString("VM_REQUIRES_VGPU", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted to run a VM on a host on which the VUSB required by the VM cannot be allocated on any PUSBs in the USB_group needed by the VM..
        /// </summary>
        public static string VM_REQUIRES_VUSB {
            get {
                return ResourceManager.GetString("VM_REQUIRES_VUSB", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while reverting the specified virtual machine to the specified snapshot.
        /// </summary>
        public static string VM_REVERT_FAILED {
            get {
                return ResourceManager.GetString("VM_REVERT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The shutdown of this VM timed out.
        /// </summary>
        public static string VM_SHUTDOWN_TIMEOUT {
            get {
                return ResourceManager.GetString("VM_SHUTDOWN_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The quiesced-snapshot operation failed for an unexpected reason.
        /// </summary>
        public static string VM_SNAPSHOT_WITH_QUIESCE_FAILED {
            get {
                return ResourceManager.GetString("VM_SNAPSHOT_WITH_QUIESCE_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VSS plug-in is not installed on this virtual machine.
        /// </summary>
        public static string VM_SNAPSHOT_WITH_QUIESCE_NOT_SUPPORTED {
            get {
                return ResourceManager.GetString("VM_SNAPSHOT_WITH_QUIESCE_NOT_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VSS plug-in cannot be contacted.
        /// </summary>
        public static string VM_SNAPSHOT_WITH_QUIESCE_PLUGIN_DEOS_NOT_RESPOND {
            get {
                return ResourceManager.GetString("VM_SNAPSHOT_WITH_QUIESCE_PLUGIN_DEOS_NOT_RESPOND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VSS plug-in has timed out.
        /// </summary>
        public static string VM_SNAPSHOT_WITH_QUIESCE_TIMEOUT {
            get {
                return ResourceManager.GetString("VM_SNAPSHOT_WITH_QUIESCE_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The VM cannot be imported unforced because it is either the same version or an older version of an existing VM..
        /// </summary>
        public static string VM_TO_IMPORT_IS_NOT_NEWER_VERSION {
            get {
                return ResourceManager.GetString("VM_TO_IMPORT_IS_NOT_NEWER_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Too many VCPUs to start this VM.
        /// </summary>
        public static string VM_TOO_MANY_VCPUS {
            get {
                return ResourceManager.GetString("VM_TOO_MANY_VCPUS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You attempted an operation on VM {0} that was judged to be unsafe by the server. This can happen if the VM would run on a CPU that has a potentially incompatible set of feature flags to those the VM requires. If you want to override this warning then use the &apos;force&apos; option..
        /// </summary>
        public static string VM_UNSAFE_BOOT {
            get {
                return ResourceManager.GetString("VM_UNSAFE_BOOT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Archive more frequent than backup..
        /// </summary>
        public static string VMPP_ARCHIVE_MORE_FREQUENT_THAN_BACKUP {
            get {
                return ResourceManager.GetString("VMPP_ARCHIVE_MORE_FREQUENT_THAN_BACKUP", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is at least on VM assigned to this protection policy..
        /// </summary>
        public static string VMPP_HAS_VM {
            get {
                return ResourceManager.GetString("VMPP_HAS_VM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The given VMs failed to release memory when instructed to do so.
        /// </summary>
        public static string VMS_FAILED_TO_COOPERATE {
            get {
                return ResourceManager.GetString("VMS_FAILED_TO_COOPERATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is at least one VM assigned to snapshot schedule..
        /// </summary>
        public static string VMSS_HAS_VM {
            get {
                return ResourceManager.GetString("VMSS_HAS_VM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WLB rejected our configured authentication details..
        /// </summary>
        public static string WLB_AUTHENTICATION_FAILED {
            get {
                return ResourceManager.GetString("WLB_AUTHENTICATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WLB refused a connection to the server..
        /// </summary>
        public static string WLB_CONNECTION_REFUSED {
            get {
                return ResourceManager.GetString("WLB_CONNECTION_REFUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The connection to the WLB server was reset..
        /// </summary>
        public static string WLB_CONNECTION_RESET {
            get {
                return ResourceManager.GetString("WLB_CONNECTION_RESET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This pool has wlb-enabled set to false..
        /// </summary>
        public static string WLB_DISABLED {
            get {
                return ResourceManager.GetString("WLB_DISABLED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WLB reported an internal error..
        /// </summary>
        public static string WLB_INTERNAL_ERROR {
            get {
                return ResourceManager.GetString("WLB_INTERNAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WLB rejected the server&apos;s request as malformed..
        /// </summary>
        public static string WLB_MALFORMED_REQUEST {
            get {
                return ResourceManager.GetString("WLB_MALFORMED_REQUEST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WLB server said something that the server wasn&apos;t expecting or didn&apos;t understand..
        /// </summary>
        public static string WLB_MALFORMED_RESPONSE {
            get {
                return ResourceManager.GetString("WLB_MALFORMED_RESPONSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No WLB connection is configured..
        /// </summary>
        public static string WLB_NOT_INITIALIZED {
            get {
                return ResourceManager.GetString("WLB_NOT_INITIALIZED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The communication with the WLB server timed out..
        /// </summary>
        public static string WLB_TIMEOUT {
            get {
                return ResourceManager.GetString("WLB_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The configured WLB server name failed to resolve in DNS..
        /// </summary>
        public static string WLB_UNKNOWN_HOST {
            get {
                return ResourceManager.GetString("WLB_UNKNOWN_HOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The WLB URL is invalid. Ensure it is in format: &lt;ipaddress&gt;:&lt;port&gt;.  The configured/given URL is returned..
        /// </summary>
        public static string WLB_URL_INVALID {
            get {
                return ResourceManager.GetString("WLB_URL_INVALID", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WLB reported that the server rejected its configured authentication details..
        /// </summary>
        public static string WLB_XENSERVER_AUTHENTICATION_FAILED {
            get {
                return ResourceManager.GetString("WLB_XENSERVER_AUTHENTICATION_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WLB reported that the server refused to let it connect (even though we&apos;re connecting perfectly fine in the other direction)..
        /// </summary>
        public static string WLB_XENSERVER_CONNECTION_REFUSED {
            get {
                return ResourceManager.GetString("WLB_XENSERVER_CONNECTION_REFUSED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WLB reported that the server said something to it that WLB wasn&apos;t expecting or didn&apos;t understand..
        /// </summary>
        public static string WLB_XENSERVER_MALFORMED_RESPONSE {
            get {
                return ResourceManager.GetString("WLB_XENSERVER_MALFORMED_RESPONSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WLB reported that communication with the server timed out..
        /// </summary>
        public static string WLB_XENSERVER_TIMEOUT {
            get {
                return ResourceManager.GetString("WLB_XENSERVER_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WLB reported that its configured server name for this server instance failed to resolve in DNS..
        /// </summary>
        public static string WLB_XENSERVER_UNKNOWN_HOST {
            get {
                return ResourceManager.GetString("WLB_XENSERVER_UNKNOWN_HOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to 3rd party xapi hook failed.
        /// </summary>
        public static string XAPI_HOOK_FAILED {
            get {
                return ResourceManager.GetString("XAPI_HOOK_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Some volumes to be snapshot could not be added to the VSS snapshot set.
        /// </summary>
        public static string XEN_VSS_REQ_ERROR_ADDING_VOLUME_TO_SNAPSET_FAILED {
            get {
                return ResourceManager.GetString("XEN_VSS_REQ_ERROR_ADDING_VOLUME_TO_SNAPSET_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to create the snapshots failed.
        /// </summary>
        public static string XEN_VSS_REQ_ERROR_CREATING_SNAPSHOT {
            get {
                return ResourceManager.GetString("XEN_VSS_REQ_ERROR_CREATING_SNAPSHOT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not create the XML string generated by the transportable snapshot.
        /// </summary>
        public static string XEN_VSS_REQ_ERROR_CREATING_SNAPSHOT_XML_STRING {
            get {
                return ResourceManager.GetString("XEN_VSS_REQ_ERROR_CREATING_SNAPSHOT_XML_STRING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Initialization of the VSS requester failed.
        /// </summary>
        public static string XEN_VSS_REQ_ERROR_INIT_FAILED {
            get {
                return ResourceManager.GetString("XEN_VSS_REQ_ERROR_INIT_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Could not find any volumes supported by the Vss Provider.
        /// </summary>
        public static string XEN_VSS_REQ_ERROR_NO_VOLUMES_SUPPORTED {
            get {
                return ResourceManager.GetString("XEN_VSS_REQ_ERROR_NO_VOLUMES_SUPPORTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to prepare VSS writers for the snapshot failed.
        /// </summary>
        public static string XEN_VSS_REQ_ERROR_PREPARING_WRITERS {
            get {
                return ResourceManager.GetString("XEN_VSS_REQ_ERROR_PREPARING_WRITERS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Vss Provider is not loaded.
        /// </summary>
        public static string XEN_VSS_REQ_ERROR_PROV_NOT_LOADED {
            get {
                return ResourceManager.GetString("XEN_VSS_REQ_ERROR_PROV_NOT_LOADED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An attempt to start a new VSS snapshot failed.
        /// </summary>
        public static string XEN_VSS_REQ_ERROR_START_SNAPSHOT_SET_FAILED {
            get {
                return ResourceManager.GetString("XEN_VSS_REQ_ERROR_START_SNAPSHOT_SET_FAILED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The requested plugin could not be found..
        /// </summary>
        public static string XENAPI_MISSING_PLUGIN {
            get {
                return ResourceManager.GetString("XENAPI_MISSING_PLUGIN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There was a failure communicating with the plugin..
        /// </summary>
        public static string XENAPI_PLUGIN_FAILURE {
            get {
                return ResourceManager.GetString("XENAPI_PLUGIN_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occurred while performing the XMLRPC request..
        /// </summary>
        public static string XMLRPC_GENERAL_ERROR {
            get {
                return ResourceManager.GetString("XMLRPC_GENERAL_ERROR", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The server failed to unmarshal the XMLRPC message; it was expecting one element and received something else..
        /// </summary>
        public static string XMLRPC_UNMARSHAL_FAILURE {
            get {
                return ResourceManager.GetString("XMLRPC_UNMARSHAL_FAILURE", resourceCulture);
            }
        }
    }
}
